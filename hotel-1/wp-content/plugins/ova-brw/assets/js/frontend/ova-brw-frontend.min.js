!function(j){"use strict";var b={init:function(){this.brw_datepicker(),this.submit_button(),this.ova_collapsed(),this.ova_field_search_changed(),this.ova_get_time_to_book_start(),this.ova_get_time_to_book_end(),this.ova_startdate_perido_time(),this.ova_ajax_load_packages(),this.ova_ajax_show_total(),this.ova_ajax_show_total_after_load(),this.ova_search_ajax(),this.ova_gallery_product(),this.ova_deposit(),this.ova_remove_from_cart()},ova_get_time_to_book_start:function(e){var a=[];return"undefined"!=typeof brw_time_to_book_general_calendar&&(a=brw_time_to_book_general_calendar.replace(/ /g,"").split(",")),void 0===e?a:"no"==e?[]:e.replace(/ /g,"").split(",")},ova_get_time_to_book_end:function(e){var a=[];return"undefined"!=typeof brw_time_to_book_general_calendar_endate&&(a=brw_time_to_book_general_calendar_endate.replace(/ /g,"").split(",")),void 0===e?a:"no"==e?[]:e.replace(/ /g,"").split(",")},ova_field_search_changed:function(){var e,a;j('.ovabrw_search select[name="ovabrw_attribute"]').on("change",function(){j(this).closest(".wrap_content").children(".s_field.ovabrw-value-attribute").css("display","none");var e=j(this).val();e&&j(this).closest(".wrap_content").children(".s_field#"+e).css("display","inline-block")}),j('.ovabrw_search select[name="cat"]').on("change",function(){t(j(this).closest("form"),j(this).val())}),j(".ovabrw_search").length&&t(j(".ovabrw_search"),""),j('.ovabrw_search select[name="cat"]').length&&(e=j("form.ovabrw_search"),(a=j('form.ovabrw_search select[name="cat"]').val())&&t(e,a))},brw_datepicker:function(){var o=j(".ovabrw_datetimepicker").data("firstday");"undefined"!=typeof brw_lang_general_calendar&&j.datetimepicker.setLocale(brw_lang_general_calendar);var l="";"undefined"!=typeof brw_disable_week_day&&(l=brw_disable_week_day.split(",").map(function(e){return parseInt(e,10)}));var i="";"undefined"!=typeof brw_time_to_book_general_calendar&&(i=brw_time_to_book_general_calendar.replace(/ /g,"").split(","));var c=30;"undefined"!=typeof brw_data_step&&(c=brw_data_step);var n="";"undefined"!=typeof brw_format_time&&(n=brw_format_time);var d="";switch(d="undefined"!=typeof brw_date_format?brw_date_format:d){case"d-m-Y":d="DD-MM-Y";break;case"m/d/Y":d="MM/DD/Y";break;case"Y/m/d":d="Y/MM/DD";break;case"Y-m-d":d="Y-MM-DD";break;default:d="DD-MM-Y"}var s=new Date;j.datetimepicker.setDateFormatter({parseDate:function(e,a){a=moment(e,a);return!!a.isValid()&&a.toDate()},formatDate:function(e,a){return moment(e).format(a)}}),j(window).width()<=1024&&j(".ovabrw_datetimepicker").datetimepicker({closeOnTimeSelect:!1}),j(".ovabrw_datetimepicker").each(function(){var t=[],e=[],a=j(this).attr("order_time"),r=j(this).data("disable-week-day");r&&(l=r.toString().split(",").map(function(e){return parseInt(e,10)})),(e=a?JSON.parse(a):e).forEach(function(e,a){e.hasOwnProperty("rendering")&&e.start_v2&&t.push(e.start_v2)});a=j(this).attr("default_hour"),e={scrollInput:!1,dayOfWeekStart:o,minDate:s,disabledWeekDays:l,format:d+" "+n,formatDate:d,formatTime:n,step:c,allowTimes:i,timepicker:!0,autoclose:!0,disabledDates:t,defaultTime:a};j(this).hasClass("no_time_picker")&&(e={scrollInput:!1,dayOfWeekStart:o,minDate:s,disabledWeekDays:l,format:d,formatDate:d,formatTime:n,step:c,allowTimes:i,timepicker:!0,autoclose:!0,disabledDates:t,defaultTime:a}),j(this).datetimepicker(e)}),j(".ovabrw_datetimepicker.ovabrw_start_date").on("click",function(){var t=[],e=[],a=j(this).attr("order_time"),r=j(this).data("disable-week-day");r&&(l=r.toString().split(",").map(function(e){return parseInt(e,10)})),(e=a?JSON.parse(a):e).forEach(function(e,a){e.hasOwnProperty("rendering")&&e.start_v2&&t.push(e.start_v2)});var i=j(this).attr("default_hour"),r="";"undefined"!=typeof brw_format_time&&(r=brw_format_time);a="true"==(a=j(this).attr("timepicker")),e=j(this).attr("time_to_book"),e=b.ova_get_time_to_book_start(e),i={dayOfWeekStart:o,minDate:s,disabledWeekDays:l,autoclose:!0,step:c,format:d+" "+r,formatDate:d,formatTime:r,defaultTime:i,allowTimes:e,timepicker:a,disabledDates:t};!j(this).hasClass("no_time_picker")&&0!=e.length&&0!=a||(i={dayOfWeekStart:o,minDate:s,disabledWeekDays:l,autoclose:!0,step:c,format:d,formatDate:d,defaultTime:!1,allowTimes:e,timepicker:!1,disabledDates:t}),j(this).datetimepicker(i)}),j(".ovabrw_datetimepicker.ovabrw_end_date").on("click",function(){var t=[],e=[],a=j(this).attr("order_time"),r=j(this).data("disable-week-day");r&&(l=r.toString().split(",").map(function(e){return parseInt(e,10)})),(e=a?JSON.parse(a):e).forEach(function(e,a){e.hasOwnProperty("rendering")&&e.start_v2&&t.push(e.start_v2)});var i="true"==(i=j(this).attr("timepicker")),n="";"undefined"!=typeof brw_format_time&&(n=brw_format_time);r=j(this).attr("time_to_book"),a=b.ova_get_time_to_book_end(r),e=j(this).attr("default_hour");!j(this).hasClass("no_time_picker")&&0!=a.length&&0!=i||(n="",e=i=!1);r=(r=j(this).closest("form").find(".ovabrw_start_date").val())||j(".ovabrw_start_date.ovabrw_datetimepicker").val(),e={dayOfWeekStart:o,disabledWeekDays:l,autoclose:!0,step:c,minDate:r||!1,format:d+" "+n,formatDate:d,formatTime:n,defaultTime:e,allowTimes:a,timepicker:i,disabledDates:t};!j(this).hasClass("no_time_picker")&&0!=a.length&&0!=i||(e={dayOfWeekStart:o,disabledWeekDays:l,autoclose:!0,step:c,minDate:r||!1,format:d,formatDate:d,defaultTime:!1,allowTimes:a,timepicker:!1,disabledDates:t}),j(this).datetimepicker(e)}),j(".ovabrw_datetimepicker.date_picker_period").each(function(){j(this).data("hour_default"),j(this).data("time_step");var e={dayOfWeekStart:o,minDate:s,format:d,timepicker:!1};j(this).datetimepicker(e)}),j(".ovabrw_datetimepicker.no_time_picker").each(function(){j(this).datetimepicker({timepicker:!1})})},submit_button:function(){j(".ovabrw_btn_submit").on("click",function(e){var a=j(this).closest(".ovabrw_search").data("mesg_required"),t=!0;if(j(this).closest(".ovabrw_search").find(".content .wrap-error").empty(),j(this).closest(".form_ovabrw").find(".required").each(function(){j(this).val()||(t=!1,j(this).parent(".content").children(".wrap-error").append('<p class="error">'+a+"</p>"))}),!t)return e.preventDefault(),!1}),j(".ovabrw_booking_form button.submit").on("click",function(e){var a=!0;j(this).closest(".ovabrw_booking_form").find(".error_item").css("display","none"),j(this).closest(".ovabrw_booking_form").find(".required").each(function(){j(this).val()||(a=!1,j(this).closest(".rental_item").find(".error_item").css("display","block"),0<j(this).parent(".period_package").length&&j(this).parent(".period_package").parent(".rental_item").children(".error_item").css("display","block")),"checkbox"==j(this).attr("type")&&(j(this).closest(".rental_item").find("input:checked").val()||(a=!1,j(this).closest(".rental_item").find(".error_item").css("display","block")))}),a||e.preventDefault()}),j(".request_booking button.submit").on("click",function(e){var a=!0;j(this).closest(".request_booking").find(".error_item").css("display","none"),j(this).closest(".request_booking").find(".required").each(function(){j(this).val()||(a=!1,j(this).closest(".rental_item").children(".error_item").css("display","block"),0<j(this).parent(".period_package").length&&j(this).parent(".period_package").parent(".rental_item").children(".error_item").css("display","block")),"checkbox"==j(this).attr("type")&&(j(this).closest(".rental_item").find("input:checked").val()||(a=!1,j(this).closest(".rental_item").find(".error_item").css("display","block")))}),a||e.preventDefault()}),j('.ovabrw-file input[type="file"]').each(function(){j(this).on("change",function(e){e.preventDefault();var a=j(this),t=a.data("max-file-size"),r=a.data("max-file-size-msg"),i=a.data("formats"),n=a.data("file-mimes"),o=[];"object"==typeof n&&j.each(n,function(e,a){o.push(a)}),a.closest(".ovabrw-file").find(".ovabrw-file-name").html("");var l=this.files[0].name,e=this.files[0].size,n=this.files[0].type;l&&e&&n&&(a.closest(".ovabrw-file").find(".ovabrw-file-name").html(l),t<(e/1048576).toFixed(2)&&a.closest(".ovabrw-file").find(".ovabrw-file-name").html(r),-1==j.inArray(n,o)&&a.closest(".ovabrw-file").find(".ovabrw-file-name").html(i))})})},ova_collapsed:function(){j(".ovabrw-according").off().on("click",function(e){e.preventDefault(),j(this).siblings(".ovabrw_collapse_content").slideToggle()}),j(".ovabrw_open_popup").off().on("click",function(e){e.preventDefault(),j(this).siblings(".popup").css("display","block")}),j(".popup-close").on("click",function(e){e.preventDefault(),j(this).parent(".popup-inner").parent(".popup").css("display","none")}),j(".popup-close-2").on("click",function(e){e.preventDefault(),j(this).parent(".close_discount").parent(".popup-inner").parent(".popup").css("display","none")}),j(window).click(function(e){"room-video-modal-container"==e.target.className&&j(document).find(".elementor-product-imagex .room-video-modal-container").hide()})},ova_startdate_perido_time:function(){j(".ovabrw_datetimepicker.startdate_perido_time").focus(function(e){j(this).blur()}),j("body").on("change",".startdate_perido_time",function(){var e=j(this);e.val()&&(e.closest("form").find(".show_ajax_content").removeClass("active"),e.closest("form").find(".show_total").html(""),b.ova_ajax_load_packages(e))})},ova_ajax_load_packages:function(a=null){var e,t;null!=a&&(e=a.val(),t=a.data("pid"),a.closest("form").find('select[name="ovabrw_period_package_id"]').attr("disabled","disabled"),j.ajax({url:ajax_object.ajax_url,type:"POST",data:{action:"ovabrw_get_package_by_time",startdate:e,post_id:t},success:function(e){a.closest("form").find('select[name="ovabrw_period_package_id"] option ').remove();var t="",e=j.parseJSON(e);e&&j.each(e,function(e,a){t+='<option value="'+e+'">'+a+"</option>"}),t&&a.closest("form").find('select[name="ovabrw_period_package_id"] ').append(t),a.closest("form").find('select[name="ovabrw_period_package_id"] ').hasClass("select2-hidden-accessible")&&a.closest("form").find('select[name="ovabrw_period_package_id"] ').select2(),a.closest("form").find('select[name="ovabrw_period_package_id"] ').prop("disabled",!1),a.closest("form").find(".show_ajax_content").removeClass("active"),a.closest("form").find(".show_total").html("")}}))},ova_ajax_show_total:function(){j("body").on("change",".booking_form",function(){j(this).find('input[name="ovabrw_pickup_date"]').val()&&b.ova_ajax_show_total_after_load(j(this))}),j(".booking_form").each(function(){var e,a,t=j(this);0!=t.data("run_ajax")&&(e=t.find('input[name="ovabrw_pickup_date"]').val(),a=t.find('input[name="ovabrw_dropoff_date"]').val(),e&&a&&b.ova_ajax_show_total_after_load(t))})},ova_ajax_show_total_after_load:function(t=null){var e,a,r,i,n,o,l,c,d,s,_,u=[],f=[],p={};null!=t&&((s=t).find(".ajax_loading").addClass("active"),s.find('input[name="car_id"]').val()&&(o=s.find('input[name="car_id"]').val()),s.find('select[name="ovabrw_pickup_loc"]').val()&&(e=s.find('select[name="ovabrw_pickup_loc"]').val()),s.find('select[name="ovabrw_pickoff_loc"]').val()&&(a=s.find('select[name="ovabrw_pickoff_loc"]').val()),s.find('input[name="ovabrw_pickup_date"]').val()&&(r=s.find('input[name="ovabrw_pickup_date"]').val()),s.find('input[name="ovabrw_dropoff_date"]').val()&&(i=s.find('input[name="ovabrw_dropoff_date"]').val()),s.find('select[name="ovabrw_period_package_id"]').val()&&(l=s.find('select[name="ovabrw_period_package_id"]').val()),s.find('input[name="ovabrw_number_vehicle"]').val()&&(n=s.find('input[name="ovabrw_number_vehicle"]').val()),s.find('input[name="ova_type_deposit"]:checked').val()&&(c=s.find('input[name="ova_type_deposit"]:checked').val()),!s.find('input[name="data_custom_ckf"]')||(_=s.find('input[name="data_custom_ckf"]').data("ckf"))&&j.each(_,function(e,a){var t;"radio"==a.type&&(p[e]=s.find('input[name="'+e+'"]:checked').val()),"checkbox"==a.type&&(t=[],s.find(".ovabrw-checkbox input[type=checkbox]:checked").each(function(){t.push(j(this).val())}),p[e]=t),"select"==a.type&&(p[e]=s.find('select[name="'+e+'"]').val())}),s.find(".ovabrw_resource input[type=checkbox]:checked").each(function(){u[j(this).data("resource_key")]=j(this).val()}),d=j.extend({},u),s.find("select[name='ovabrw_service[]']").each(function(){j(this).val()&&f.push(j(this).val())}),_=j.extend({},f),j.ajax({url:ajax_object.ajax_url,type:"POST",data:{action:"ovabrw_calculate_total",pickup_loc:e,dropoff_loc:a,pickup_date:r,package_id:l,dropoff_date:i,quantity:n,deposit:c,resources:JSON.stringify(d),services:JSON.stringify(_),custom_ckf:JSON.stringify(p),id:o},success:function(e){var a=JSON.parse(e);0!=e?(t.find(".show_ajax_content").addClass("active"),t.find(".show_total").html("").append(a.line_total),a.error?(t.find(".show_ajax_content").removeClass("active"),t.find(".show_total").html(""),t.find(".ajax-show-error").html("").append(a.error).show()):(0<a.number_vehicle_available?(t.find(".show_availables_vehicle").html("").append(a.number_vehicle_available),t.find('input[name="ovabrw_number_vehicle"]').attr("max",a.number_vehicle_available)):(t.find(".show_availables_vehicle").html("").append(0),t.find('input[name="ovabrw_number_vehicle"]').attr("max",1)),t.find(".ajax-show-error").html("").hide())):(t.find(".show_ajax_content").removeClass("active"),t.find(".show_total").html(""),t.find(".ajax-show-error").html("").hide()),s.find(".ajax_loading").removeClass("active")}}))},ova_search_ajax:function(){function o(e=null){var a=j(document).find(".ovabrw-search-ajax .wrap-search-ajax"),t=a.find(".filter-layout-active").attr("data-layout"),r=a.find('input[name="ovabrw_pickup_date"]').val(),i=a.find('input[name="ovabrw_dropoff_date"]').val(),n=a.find('input[name="ovabrw_adults"]').val(),o=a.find('input[name="ovabrw_childrens"]').val(),l=a.find('input[name="ovabrw_beds"]').val(),c=a.find('input[name="ovabrw_baths"]').val(),d=a.find(".search-ajax-result"),s=a.data("icon_adults"),_=a.data("icon_children"),u=a.data("icon_area"),f=a.data("icon_beds"),p=a.data("icon_baths"),h=a.data("field_1"),m=a.data("field_2"),v=a.data("field_3"),b=a.data("field_4"),w=a.data("field_5"),y=d.data("order"),g=d.data("orderby"),k=d.data("posts-per-page"),x=d.find(".ovabrw-pagination-ajax .current").attr("data-paged"),D=d.data("orderby_meta_key");a.find(".wrap-load-more").show(),j.ajax({url:ajax_object.ajax_url,type:"POST",data:{action:"ovabrw_search_ajax",template:t,start_date:r,end_date:i,adults:n,childrens:o,beds:l,baths:c,icon_adults:s,icon_children:_,icon_area:u,icon_beds:f,icon_baths:p,field_1:h,field_2:m,field_3:v,field_4:b,field_5:w,order:y,orderby:g,orderby_meta_key:D,per_page:k,paged:x,clicked:e},success:function(e){e&&(e=JSON.parse(e),e=j(e.result).fadeOut(300).fadeIn(500),d.html(e),null==(e=d.find(".room_number_results_found").val())&&(e=0),d.closest(".wrap-search-ajax").find(".number-result-room-found").html("").append(e),a.find(".wrap-load-more").hide(),1!=x&&d.find(".ovabrw-pagination-ajax .current").attr("data-paged",1))}})}0<j(".ovabrw-search-ajax .wrap-search-ajax").length&&(j(".ovabrw-search-ajax .wrap-search-ajax").data("clicked")?o(!0):o()),j(".ovabrw-search-ajax .wrap-search-ajax .ovabrw-btn").on("click",function(e){o(!0),j("html, body").animate({scrollTop:j("#search-ajax-result").offset().top-250},500),j(this).closest(".wrap-search-ajax").find(".input_select_list").hide(),e.preventDefault()}),j(".ovabrw-search-ajax").on("click",".wrap-search-ajax .filter-layout",function(e){e.preventDefault();var a=j(this),t=j(".wrap-search-ajax .filter-layout-active").attr("data-layout"),r=a.attr("data-layout"),e=a.closest(".wrap-search-ajax").find(".ovabrw-room-ajax").data("clicked");r!=t&&(j(".wrap-search-ajax .filter-layout").removeClass("filter-layout-active"),a.addClass("filter-layout-active"),e?o(!0):o())}),j(".ovabrw-search-ajax").on("click",".wrap-search-ajax .ovabrw-room-filter .input_select_list .term_item",function(e){e.preventDefault();var a=j(this),t=a.closest(".filter-sort").find(".input_select_input_value").val(),e=a.closest(".wrap-search-ajax").find(".search-ajax-result"),a=a.closest(".wrap-search-ajax").find(".ovabrw-room-ajax").data("clicked");"id_desc"==t?(e.data("order","DESC"),e.data("orderby","ID"),e.data("orderby_meta_key","")):"rating_desc"==t?(e.data("order","DESC"),e.data("orderby","meta_value_num"),e.data("orderby_meta_key","_wc_average_rating")):"price_asc"==t?(e.data("order","ASC"),e.data("orderby","meta_value_num"),e.data("orderby_meta_key","_price")):"price_desc"==t&&(e.data("order","DESC"),e.data("orderby","meta_value_num"),e.data("orderby_meta_key","_price")),a?o(!0):o()}),j(".ovabrw-room-filter .clear-filter").on("click",function(e){e.preventDefault();var a=j(this),t=a.closest(".wrap-search-ajax"),r=t.data("adults"),i=t.data("childrens"),n=t.data("beds"),e=t.data("baths");a.closest(".wrap-search-ajax").find(".ovabrw-pagination-ajax").attr("data-paged",1),void 0!==r&&r||(r=1),void 0!==i&&i||(i=0),void 0!==n&&n||(n=1),void 0!==e&&e||(e=1),t.find('input[name="ovabrw_pickup_date"]').val("").trigger("change"),t.find('input[name="ovabrw_dropoff_date"]').val("").trigger("change"),t.find('input[name="ovabrw_adults"]').val(r),t.find('input[name="ovabrw_childrens"]').val(i),t.find('input[name="ovabrw_beds"]').val(n),t.find('input[name="ovabrw_baths"]').val(e),o()}),j(document).on("click",".wrap-search-ajax .ovabrw-pagination-ajax .page-numbers",function(e){e.preventDefault();var a=j(this),t=j(".wrap-search-ajax .ovabrw-pagination-ajax .current").attr("data-paged"),r=a.attr("data-paged"),e=a.closest(".wrap-search-ajax").find(".ovabrw-room-ajax").data("clicked");(t!=r||1==t&&1==r)&&(j(window).scrollTop(0),j(".wrap-search-ajax .ovabrw-pagination-ajax .page-numbers").removeClass("current"),a.addClass("current"),e?o(!0):o())})},ova_gallery_product:function(){j(".elementor-product-image").each(function(){var e,a,t,r,i;e=j(this),a=e.find(".room-video-link"),t=e.find(".room-video-modal-container"),r=e.find(".modal-close"),i=e.find(".modal-video"),a.each(function(){j(this).on("click",function(){var e=function(e){e=e.match(/^.*(youtu.be\/|v\/|u\/\w\/|embed\/|watch\?v=|\&v=)([^#\&\?]*).*/);return e&&11==e[2].length?e[2]:"error"}(j(this).data("src"));"error"!=e&&(i.attr("src","https://www.youtube.com/embed/"+e+"?autoplay=1;&loop=1;&controls=1;&showinfo=1;&modestbranding=1"),t.css("display","flex"))})}),r.on("click",function(){t.hide(),i.removeAttr("src")}),j(window).click(function(e){"room-video-modal-container"==e.target.className&&(t.hide(),i.removeAttr("src"))})})},ova_deposit:function(){j("form.booking_form .ovabrw-deposit .ovabrw-type-deposit").each(function(){"full"==j(this).find('input[name="ova_type_deposit"]:checked').val()?j(this).closest(".ovabrw-deposit").find(".title-deposite").hide():j(this).closest(".ovabrw-deposit").find(".title-deposite").show()}),j("form.booking_form .ovabrw-deposit .ovabrw-type-deposit").on("change",function(){"full"==j(this).find('input[name="ova_type_deposit"]:checked').val()?j(this).closest(".ovabrw-deposit").find(".title-deposite").hide():j(this).closest(".ovabrw-deposit").find(".title-deposite").show()})},ova_remove_from_cart:function(){j(document).on("click",".remove_from_cart_button",function(){var e=j(this).data("cart_item_key");j.ajax({url:ajax_object.ajax_url,type:"POST",data:{action:"ovabrw_remove_cart",cart_item_key:e},success:function(e){""!=e&&j(".ova-menu-cart").find(".cart-total .items").html(e)}})})}};function t(r,e){"undefined"!=typeof ova_brw_search_show_tax_depend_cat&&r.length&&("yes"==ova_brw_search_show_tax_depend_cat?r.find(".s_field_cus_tax").hide():r.find(".s_field_cus_tax").show()),e&&j.ajax({url:ajax_object.ajax_url,type:"POST",data:{action:"ovabrw_get_tax_in_cat",cat_val:e},success:function(e){if(e){var a=e.split(",");if(a.length)for(var t=0;t<a.length;t++)0<r.find("."+a[t]).length&&r.find("."+a[t]).show()}}})}j(document).ready(function(){b.init()}),document.addEventListener("DOMContentLoaded",function(){var u="";"undefined"!=typeof brw_date_format&&(u=brw_date_format),j(".entry-summary .wrap_calendar").each(function(e){var a,t,r,i,l,n,c,d,f,p,h,m,o,s,_,v=j(this).find(".ovabrw__product_calendar")[0];null!==v&&(a=v.getAttribute("data-nav"),t=v.getAttribute("data-default_view"),r=v.getAttribute("data-first-day")||0,"month"==t&&(t="dayGridMonth"),i=v.getAttribute("data-lang").replace(/\s/g,""),l=v.getAttribute("data-define_day"),n=parseInt(v.getAttribute("data_event_number")),c=v.getAttribute("default_hour_start"),d=v.getAttribute("time_to_book_start"),d=b.ova_get_time_to_book_start(d),_=(_=v.getAttribute("price_calendar")).replace(/[\u0000-\u001F]+/g,""),f=JSON.parse(_),o=v.getAttribute("data-special-time"),p=JSON.parse(o),h=v.getAttribute("data-background-day"),_=v.getAttribute("data-disable_week_day"),m="",_&&(m=JSON.parse(_)),o="",s=[],void 0!==(o=(_=v.getAttribute("order_time"))&&0<_.length?JSON.parse(_):o)&&0<o.length&&o.forEach(function(e,a){e.hasOwnProperty("rendering")&&s.push(e.start)}),new FullCalendar.Calendar(v,{editable:!1,events:o,firstDay:r,height:"auto",headerToolbar:{left:"prev,next,today,"+a,right:"title"},initialView:t,locale:i,dayMaxEventRows:!0,views:{dayGrid:{dayMaxEventRows:n},timeGrid:{dayMaxEventRows:n},week:{dayMaxEventRows:n},day:{dayMaxEventRows:n}},dayCellDidMount:function(r){var e,i=new Date(r.date),n=Date.UTC(i.getFullYear(),i.getMonth(),i.getDate())/1e3;if(""!=f){if("day"==(e=f[0].type_price)){var a=f[1].ovabrw_daily_monday,o=f[1].ovabrw_daily_tuesday,l=f[1].ovabrw_daily_wednesday,c=f[1].ovabrw_daily_thursday,d=f[1].ovabrw_daily_friday,s=f[1].ovabrw_daily_saturday,_=f[1].ovabrw_daily_sunday;switch(i.getDay()){case 0:{m&&j.each(m,function(e,a){a==i.getDay()&&(r.el.children[0].className=r.el.children[0].className+" unavailable_date",j(".unavailable_date").css("background-color",h))});let t=r.el.querySelectorAll(".fc-daygrid-day-bg")[0];if(t)return p?(t.innerHTML=_,j.each(p,function(e,a){n>=a[0]&&n<=a[1]&&(t.innerHTML=e)})):t.innerHTML=_,r;break}case 1:{m&&j.each(m,function(e,a){a==i.getDay()&&(r.el.children[0].className=r.el.children[0].className+" unavailable_date",j(".unavailable_date").css("background-color",h))});let t=r.el.querySelectorAll(".fc-daygrid-day-bg")[0];if(t)return p?(t.innerHTML=a,j.each(p,function(e,a){n>=a[0]&&n<=a[1]&&(t.innerHTML=e)})):t.innerHTML=a,r;break}case 2:{m&&j.each(m,function(e,a){a==i.getDay()&&(r.el.children[0].className=r.el.children[0].className+" unavailable_date",j(".unavailable_date").css("background-color",h))});let t=r.el.querySelectorAll(".fc-daygrid-day-bg")[0];if(t)return p?(t.innerHTML=o,j.each(p,function(e,a){n>=a[0]&&n<=a[1]&&(t.innerHTML=e)})):t.innerHTML=o,r;break}case 3:{m&&j.each(m,function(e,a){a==i.getDay()&&(r.el.children[0].className=r.el.children[0].className+" unavailable_date",j(".unavailable_date").css("background-color",h))});let t=r.el.querySelectorAll(".fc-daygrid-day-bg")[0];if(t)return p?(t.innerHTML=l,j.each(p,function(e,a){n>=a[0]&&n<=a[1]&&(t.innerHTML=e)})):t.innerHTML=l,r;break}case 4:{m&&j.each(m,function(e,a){a==i.getDay()&&(r.el.children[0].className=r.el.children[0].className+" unavailable_date",j(".unavailable_date").css("background-color",h))});let t=r.el.querySelectorAll(".fc-daygrid-day-bg")[0];if(t)return p?(t.innerHTML=c,j.each(p,function(e,a){n>=a[0]&&n<=a[1]&&(t.innerHTML=e)})):t.innerHTML=c,r;break}case 5:{m&&j.each(m,function(e,a){a==i.getDay()&&(r.el.children[0].className=r.el.children[0].className+" unavailable_date",j(".unavailable_date").css("background-color",h))});let t=r.el.querySelectorAll(".fc-daygrid-day-bg")[0];if(t)return p?(t.innerHTML=d,j.each(p,function(e,a){if(n>=a[0]&&n<=a[1])return t.innerHTML=e,r})):t.innerHTML=d,r;break}case 6:{m&&j.each(m,function(e,a){a==i.getDay()&&(r.el.children[0].className=r.el.children[0].className+" unavailable_date",j(".unavailable_date").css("background-color",h))});let t=r.el.querySelectorAll(".fc-daygrid-day-bg")[0];if(t)return p?(t.innerHTML=s,j.each(p,function(e,a){n>=a[0]&&n<=a[1]&&(t.innerHTML=e)})):t.innerHTML=s,r;break}}}else if("hour"==e){m&&j.each(m,function(e,a){a==i.getDay()&&(r.el.children[0].className=r.el.children[0].className+" unavailable_date",j(".unavailable_date").css("background-color",h))});var u=f[1].ovabrw_price_hour;let t=r.el.querySelectorAll(".fc-daygrid-day-bg")[0];if(t)return p?(t.innerHTML=u,j.each(p,function(e,a){n>=a[0]&&n<=a[1]&&(t.innerHTML=e)})):t.innerHTML=u,r}else if("mixed"==e){a=f[1].ovabrw_daily_monday,o=f[1].ovabrw_daily_tuesday,l=f[1].ovabrw_daily_wednesday,c=f[1].ovabrw_daily_thursday,d=f[1].ovabrw_daily_friday,s=f[1].ovabrw_daily_saturday,_=f[1].ovabrw_daily_sunday;switch(i.getDay()){case 0:{m&&j.each(m,function(e,a){a==i.getDay()&&(r.el.children[0].className=r.el.children[0].className+" unavailable_date",j(".unavailable_date").css("background-color",h))});let t=r.el.querySelectorAll(".fc-daygrid-day-bg")[0];if(t)return p?(t.innerHTML=_,j.each(p,function(e,a){n>=a[0]&&n<=a[1]&&(t.innerHTML=e)})):t.innerHTML=_,r;break}case 1:{m&&j.each(m,function(e,a){a==i.getDay()&&(r.el.children[0].className=r.el.children[0].className+" unavailable_date",j(".unavailable_date").css("background-color",h))});let t=r.el.querySelectorAll(".fc-daygrid-day-bg")[0];if(t)return p?(t.innerHTML=a,j.each(p,function(e,a){n>=a[0]&&n<=a[1]&&(t.innerHTML=e)})):t.innerHTML=a,r;break}case 2:{m&&j.each(m,function(e,a){a==i.getDay()&&(r.el.children[0].className=r.el.children[0].className+" unavailable_date",j(".unavailable_date").css("background-color",h))});let t=r.el.querySelectorAll(".fc-daygrid-day-bg")[0];if(t)return p?(t.innerHTML=o,j.each(p,function(e,a){n>=a[0]&&n<=a[1]&&(t.innerHTML=e)})):t.innerHTML=o,r;break}case 3:{m&&j.each(m,function(e,a){a==i.getDay()&&(r.el.children[0].className=r.el.children[0].className+" unavailable_date",j(".unavailable_date").css("background-color",h))});let t=r.el.querySelectorAll(".fc-daygrid-day-bg")[0];if(t)return p?(t.innerHTML=l,j.each(p,function(e,a){n>=a[0]&&n<=a[1]&&(t.innerHTML=e)})):t.innerHTML=l,r;break}case 4:{m&&j.each(m,function(e,a){a==i.getDay()&&(r.el.children[0].className=r.el.children[0].className+" unavailable_date",j(".unavailable_date").css("background-color",h))});let t=r.el.querySelectorAll(".fc-daygrid-day-bg")[0];if(t)return p?(t.innerHTML=c,j.each(p,function(e,a){n>=a[0]&&n<=a[1]&&(t.innerHTML=e)})):t.innerHTML=c,r;break}case 5:{m&&j.each(m,function(e,a){a==i.getDay()&&(r.el.children[0].className=r.el.children[0].className+" unavailable_date",j(".unavailable_date").css("background-color",h))});let t=r.el.querySelectorAll(".fc-daygrid-day-bg")[0];if(t)return p?(t.innerHTML=d,j.each(p,function(e,a){if(n>=a[0]&&n<=a[1])return t.innerHTML=e,r})):t.innerHTML=d,r;break}case 6:{m&&j.each(m,function(e,a){a==i.getDay()&&(r.el.children[0].className=r.el.children[0].className+" unavailable_date",j(".unavailable_date").css("background-color",h))});let t=r.el.querySelectorAll(".fc-daygrid-day-bg")[0];if(t)return p?(t.innerHTML=s,j.each(p,function(e,a){n>=a[0]&&n<=a[1]&&(t.innerHTML=e)})):t.innerHTML=s,r;break}}}}else if("period_time"==(e=v.getAttribute("type_price"))||"transportation"==e)return m&&j.each(m,function(e,a){a==i.getDay()&&(r.el.children[0].className=r.el.children[0].className+" unavailable_date",j(".unavailable_date").css("background-color",h))}),r},dateClick:function(e){var t=new Date(e.date),a=t.getFullYear(),r=(r=t.getMonth()+1)<10?"0"+r:r,i=(i=t.getDate())<10?"0"+i:i,n=new Date,o=new Date(a,r-1,i,24,0),e=a+"-"+r+"-"+i;("hotel"==l||j('.rental_item input[name="ovabrw_pickup_date"]').hasClass("no_time_picker")||d.length<1)&&(c=""),m&&j.each(m,function(e,a){a==t.getDay()&&(alert(notifi_disable_day),o=0)}),!s.includes(e)&&n<=o&&(n=(n=(n=(n=u).replace("Y",a)).replace("m",r)).replace("d",i),c?j('input[name="ovabrw_pickup_date"]').val(n+" "+c):j('input[name="ovabrw_pickup_date"]').val(n),document.getElementById("ovabrw_booking_form")&&(document.getElementById("ovabrw_booking_form").scrollIntoView({behavior:"smooth"}),j(".startdate_perido_time").each(function(){var e=j(this);e.val()&&b.ova_ajax_load_packages(e)})))}}).render())})}),window.Brw_Frontend=b}(jQuery);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,