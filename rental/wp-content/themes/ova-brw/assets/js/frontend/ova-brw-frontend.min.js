!function(D){"use strict";var T={init:function(){this.brw_datepicker(),this.submit_button(),this.ova_collapsed(),this.ova_load_name_product(),this.ova_load_tag_product(),this.ova_field_search_changed(),this.ova_get_time_to_book_start(),this.ova_get_time_to_book_end(),this.ova_change_pickup_location_transport(),this.ova_change_pick_up_off_other_location(),this.ova_startdate_perido_time(),this.ova_ajax_load_packages(),this.ova_ajax_show_total(),this.ova_ajax_show_total_after_load(),this.ova_quantity_fields(),this.ova_search_map(),this.ova_taxi_location(),this.ova_slide_image(),this.ova_modern_product()},ova_change_pickup_location_transport:function(){D(".ovabrw-form").on("change",'select[name="ovabrw_pickup_loc"].ovabrw-transport ',function(){D(this).closest(".ovabrw-form").find('select[name="ovabrw_pickoff_loc"]').empty();var a=D(this).val(),a=D(this).find('option[value="'+a+'"]').data("item_loc"),e="",e=a?(a.forEach(function(a){a&&(e+='<option value="'+a+'" >'+a+"</option>")}),e||'<option value="">Select Location</option>'):'<option value="">Select Location</option>';D(this).closest(".ovabrw-form").find('select[name="ovabrw_pickoff_loc"]').append(e)})},ova_change_pick_up_off_other_location:function(){D(".ovabrw-form").on("change",'select[name="ovabrw_pickup_loc"] ',function(){var a=D(this).val(),e=D(this).find("option:selected").text();"other_location"===a?D(this).closest(".rental_item").find(".ovabrw-other-location").append('<input style="margin-top: 10px;" name="ovabrw_pickup_loc" type="text" placeholder="'+e+'">'):D(this).closest(".rental_item").find(".ovabrw-other-location").empty()}),D(".ovabrw-form").on("change",'select[name="ovabrw_pickoff_loc"] ',function(){var a=D(this).val(),e=D(this).find("option:selected").text();"other_location"===a?D(this).closest(".rental_item").find(".ovabrw-other-location").append('<input style="margin-top: 10px;" name="ovabrw_pickoff_loc" type="text" placeholder="'+e+'">'):D(this).closest(".rental_item").find(".ovabrw-other-location").empty()})},ova_get_time_to_book_start:function(a){var e=[];return"undefined"!=typeof brw_time_to_book_general_calendar&&(e=brw_time_to_book_general_calendar.replace(/ /g,"").split(",")),void 0===a?e:"no"==a?[]:a.replace(/ /g,"").split(",")},ova_get_time_to_book_end:function(a){var e=[];return"undefined"!=typeof brw_time_to_book_general_calendar_endate&&(e=brw_time_to_book_general_calendar_endate.replace(/ /g,"").split(",")),void 0===a?e:"no"==a?[]:a.replace(/ /g,"").split(",")},ova_field_search_changed:function(){var a,e;D('.ovabrw_search select[name="ovabrw_attribute"]').on("change",function(){D(this).closest(".wrap_content").children(".s_field.ovabrw-value-attribute").css("display","none");var a=D(this).val();a&&D(this).closest(".wrap_content").children(".s_field#"+a).css("display","inline-block")}),D('.ovabrw_search select[name="cat"]').on("change",function(){m(D(this).closest("form"),D(this).val())}),D(".ovabrw_search").length&&m(D(".ovabrw_search"),""),D('.ovabrw_search select[name="cat"]').length&&(a=D("form.ovabrw_search"),(e=D('form.ovabrw_search select[name="cat"]').val())&&m(a,e))},ova_load_name_product:function(){D('.ovabrw_wd_search input[name="ovabrw_name_product"]').autocomplete({source:function(a,e){D.ajax({url:ajax_object.ajax_url,type:"POST",dataType:"json",data:{action:"ovabrw_load_name_product",keyword:a.term},success:function(a){e(a)}})},delay:0})},ova_load_tag_product:function(){D('.ovabrw_wd_search input[name="ovabrw_tag_product"]').autocomplete({source:function(a,e){D.ajax({url:ajax_object.ajax_url,type:"POST",dataType:"json",data:{action:"ovabrw_load_tag_product",keyword:a.term},success:function(a){e(a)}})},delay:0})},brw_datepicker:function(){var i=D(".ovabrw_datetimepicker").data("firstday");"undefined"!=typeof brw_lang_general_calendar&&D.datetimepicker.setLocale(brw_lang_general_calendar);var s="";"undefined"!=typeof brw_disable_week_day&&(s=brw_disable_week_day.split(",").map(function(a){return parseInt(a,10)}));var n="";"undefined"!=typeof brw_time_to_book_general_calendar&&(n=brw_time_to_book_general_calendar.replace(/ /g,"").split(","));var l=30;"undefined"!=typeof brw_data_step&&(l=brw_data_step);var r="";"undefined"!=typeof brw_year_start&&(r=brw_year_start);var c="";"undefined"!=typeof brw_year_end&&(c=brw_year_end);var d="";"undefined"!=typeof brw_format_time&&(d=brw_format_time);var p="";switch(p="undefined"!=typeof brw_date_format?brw_date_format:p){case"d-m-Y":p="DD-MM-Y";break;case"m/d/Y":p="MM/DD/Y";break;case"Y/m/d":p="Y/MM/DD";break;case"Y-m-d":p="Y-MM-DD";break;default:p="DD-MM-Y"}var _=new Date;D.datetimepicker.setDateFormatter({parseDate:function(a,e){e=moment(a,e);return!!e.isValid()&&e.toDate()},formatDate:function(a,e){return moment(a).format(e)}}),D(window).width()<=1024&&D(".ovabrw_datetimepicker").datetimepicker({closeOnTimeSelect:!1}),D(".ovabrw_datetimepicker").each(function(){var t=[],a=[],e=D(this).attr("order_time"),o=D(this).data("disable-week-day");(o="0"==o?"0,":o)&&(s=o.toString().split(",").map(function(a){return parseInt(a,10)})),(a=e?JSON.parse(e):a).forEach(function(a,e){a.hasOwnProperty("rendering")&&a.start_v2&&t.push(a.start_v2)});o="true"==(o=D(this).attr("timepicker")),e=D(this).attr("default_hour"),a={scrollInput:!1,dayOfWeekStart:i,minDate:_,disabledWeekDays:s,format:p+" "+d,formatDate:p,formatTime:d,step:l,allowTimes:n,timepicker:!0,autoclose:!0,disabledDates:t,defaultTime:e};!D(this).hasClass("no_time_picker")&&0!=o||(a={scrollInput:!1,dayOfWeekStart:i,minDate:_,disabledWeekDays:s,format:p,formatDate:p,formatTime:d,step:l,allowTimes:n,timepicker:!1,autoclose:!0,disabledDates:t,defaultTime:e,yearStart:r,yearEnd:c}),r&&(a.yearStart=r),c&&(a.yearEnd=c),D(this).datetimepicker(a)}),D(".ovabrw_datetimepicker.ovabrw_start_date").on("click",function(){var t=D(this).closest(".ovabrw-form").find(".ovabrw_timepicker"),o=[],a=[],e=D(this).attr("order_time"),n=D(this).data("disable-week-day");(n="0"==n?"0,":n)&&(s=n.toString().split(",").map(function(a){return parseInt(a,10)})),(a=e?JSON.parse(e):a).forEach(function(a,e){a.hasOwnProperty("rendering")&&a.start_v2&&o.push(a.start_v2)});var r=D(this).attr("default_hour"),n="";"undefined"!=typeof brw_format_time&&(n=brw_format_time);e="true"==(e=D(this).attr("timepicker")),a=D(this).attr("time_to_book"),a=T.ova_get_time_to_book_start(a),r={dayOfWeekStart:i,minDate:_,disabledWeekDays:s,autoclose:!0,step:l,format:p+" "+n,formatDate:p,formatTime:n,defaultTime:r,allowTimes:a,timepicker:e,disabledDates:o};!D(this).hasClass("no_time_picker")&&0!=a.length&&0!=e||(r={dayOfWeekStart:i,minDate:_,disabledWeekDays:s,autoclose:!0,step:l,format:p,formatDate:p,defaultTime:!1,allowTimes:a,timepicker:!1,disabledDates:o,onSelectDate:function(a,e){0<t.length&&(t.val(""),t.focus())}}),D(this).datetimepicker(r)}),D(".ovabrw_datetimepicker.ovabrw_end_date").on("click",function(){var t=[],a=[],e=D(this).attr("order_time"),o=D(this).data("disable-week-day");(o="0"==o?"0,":o)&&(s=o.toString().split(",").map(function(a){return parseInt(a,10)})),(a=e?JSON.parse(e):a).forEach(function(a,e){a.hasOwnProperty("rendering")&&a.start_v2&&t.push(a.start_v2)});var n="true"==(n=D(this).attr("timepicker")),r="";"undefined"!=typeof brw_format_time&&(r=brw_format_time);o=D(this).attr("time_to_book"),e=T.ova_get_time_to_book_end(o),a=D(this).attr("default_hour");!D(this).hasClass("no_time_picker")&&0!=e.length&&0!=n||(r="",a=n=!1);o=(o=D(this).closest("form").find(".ovabrw_start_date").val())||D(".ovabrw_start_date.ovabrw_datetimepicker").val(),a={dayOfWeekStart:i,disabledWeekDays:s,autoclose:!0,step:l,minDate:o||!1,format:p+" "+r,formatDate:p,formatTime:r,defaultTime:a,allowTimes:e,timepicker:n,disabledDates:t};!D(this).hasClass("no_time_picker")&&0!=e.length&&0!=n||(a={dayOfWeekStart:i,disabledWeekDays:s,autoclose:!0,step:l,minDate:o||!1,format:p,formatDate:p,defaultTime:!1,allowTimes:e,timepicker:!1,disabledDates:t}),D(this).datetimepicker(a)}),D(".ovabrw_datetimepicker.date_picker_period").each(function(){D(this).data("hour_default"),D(this).data("time_step");var a={dayOfWeekStart:i,minDate:_,format:p,timepicker:!1};D(this).datetimepicker(a)}),D(".ovabrw_datetimepicker.no_time_picker").each(function(){D(this).datetimepicker({timepicker:!1})}),D(".ovabrw_timepicker").each(function(){var t=D(this).closest(".ovabrw-form").find('input[name="ovabrw_pickup_loc"]'),a=D(this).attr("default_hour"),a={datepicker:!1,scrollInput:!1,format:d,formatTime:d,step:l,allowTimes:n,timepicker:!0,autoclose:!0,defaultTime:a,onSelectTime:function(a,e){0<t.length&&t.focus()}};D(this).datetimepicker(a)})},submit_button:function(){D(".ovabrw_btn_submit").on("click",function(a){var e=D(this).closest(".ovabrw_search").data("mesg_required"),t=!0;if(D(this).closest(".ovabrw_search").find(".content .wrap-error").empty(),D(this).closest(".form_ovabrw").find(".required").each(function(){D(this).val()||(t=!1,D(this).parent(".content").children(".wrap-error").append('<p class="error">'+e+"</p>"))}),!t)return a.preventDefault(),!1}),D("form#booking_form button.submit").on("click",function(a){var e=D(this),t=!0,o=D(this).closest("form#booking_form").find('input[name="ovabrw_rental_type"]').val();if(e.closest("form#booking_form").find(".error_item").css("display","none"),e.closest("form#booking_form").find(".required").each(function(){D(this).val()||(t=!1,D(this).closest(".rental_item").find(".error_item").css("display","block"),0<D(this).parent(".period_package").length&&D(this).parent(".period_package").parent(".rental_item").children(".error_item").css("display","block")),"checkbox"==D(this).attr("type")&&(D(this).closest(".rental_item").find("input:checked").val()||(t=!1,D(this).closest(".rental_item").find(".error_item").css("display","block"))),"taxi"==o&&("ovabrw_pickup_loc"==D(this).attr("name")&&(D(this).closest(".rental_item").find('input[name="ovabrw_origin"]').val()||(t=!1,D(this).val(""),D(this).closest(".rental_item").find(".error_item").css("display","block"))),"ovabrw_pickoff_loc"==D(this).attr("name")&&(D(this).closest(".rental_item").find('input[name="ovabrw_destination"]').val()||(t=!1,D(this).val(""),D(this).closest(".rental_item").find(".error_item").css("display","block"))))}),!t)return D("html, body").animate({scrollTop:D("form#booking_form").offset().top-300},1e3),!1;var t=!0,n=e.closest("form#booking_form").find('input[name="ovabrw-booking-terms-conditions"]');if(0<n.length){if(!n.is(":checked")){n.addClass("ovabrw-required");var r=n.data("error");return alert(r),t=!1,D("html, body").animate({scrollTop:n.offset().top-300},1e3),!1}n.removeClass("ovabrw-required"),t=t&&!0}if(!t)return!1;r=e.closest("form#booking_form").find("#ovabrw-recaptcha-booking-token");if(t&&0<r.length){n=r.val();return n?(e.addClass("disabled"),e.closest("form#booking_form").find(".ajax_show_total").show(),e.closest("form#booking_form").find(".ajax_loading").css("opacity",1),e.closest("form#booking_form").find(".ajax-show-error").hide(),D.ajax({url:ajax_object.ajax_url,type:"POST",data:{action:"ovabrw_verify_reCAPTCHA",token:n},success:function(a){a?(e.closest("form#booking_form").find(".ajax_show_total").show(),e.closest("form.booking-form").find(".ajax-show-error").html("").append(a).show(),e.removeClass("disabled"),e.closest("form#booking_form").find(".ajax_loading").css("opacity",0)):e.closest("form#booking_form").submit()}})):(r=r.attr("data-mess"),e.closest("form#booking_form").find(".ajax_show_total").show(),e.closest("form#booking_form").find(".ajax-show-error").html("").append(r).show(),e.removeClass("disabled"),e.closest("form#booking_form").find(".ajax_loading").css("opacity",0)),!1}}),D("form#request_booking button.submit").on("click",function(a){var e=D(this),t=!0;if(e.closest("form#request_booking").find(".error_item").css("display","none"),e.closest("form#request_booking").find(".required").each(function(){D(this).val()||(t=!1,D(this).closest(".rental_item").children(".error_item").css("display","block"),0<D(this).parent(".period_package").length&&D(this).parent(".period_package").parent(".rental_item").children(".error_item").css("display","block")),"checkbox"==D(this).attr("type")&&(D(this).closest(".rental_item").find("input:checked").val()||(t=!1,D(this).closest(".rental_item").find(".error_item").css("display","block")))}),!t)return D("html, body").animate({scrollTop:D("form#request_booking").offset().top-300},1e3),!1;var t=!0,o=e.closest("form#request_booking").find('input[name="ovabrw-request_booking-terms-conditions"]');if(0<o.length){if(!o.is(":checked")){o.addClass("ovabrw-required");var n=o.data("error");return alert(n),t=!1,D("html, body").animate({scrollTop:o.offset().top-300},1e3),!1}o.removeClass("ovabrw-required"),t=t&&!0}t||a.preventDefault();o=e.closest("form#request_booking").find("#ovabrw-recaptcha-request-token");if(t&&0<o.length){a=o.val();return a?(e.addClass("disabled"),e.closest("form#request_booking").find(".ajax_loading").css("opacity",1),e.closest("form#request_booking").find(".ovabrw-request-form-error").html("").hide(),D.ajax({url:ajax_object.ajax_url,type:"POST",data:{action:"ovabrw_verify_reCAPTCHA",token:a},success:function(a){a?(e.closest("form#request_booking").find(".ovabrw-request-form-error").html("").append(a).show(),e.removeClass("disabled"),e.closest("form#request_booking").find(".ajax_loading").css("opacity",0)):e.closest("form#request_booking").submit()}})):(o=o.attr("data-mess"),e.closest("form#request_booking").find(".ovabrw-request-form-error").html("").append(o).show(),e.removeClass("disabled"),e.closest("form#request_booking").find(".ajax_loading").css("opacity",0)),!1}}),D('.ovabrw-file input[type="file"]').each(function(){D(this).on("change",function(a){a.preventDefault();var e=D(this),t=e.data("max-file-size"),o=e.data("max-file-size-msg"),n=e.data("formats"),r=e.data("file-mimes"),i=[];"object"==typeof r&&D.each(r,function(a,e){i.push(e)}),e.closest(".ovabrw-file").find(".ovabrw-file-name").html("");var s=this.files[0].name,a=this.files[0].size,r=this.files[0].type;s&&a&&r&&(e.closest(".ovabrw-file").find(".ovabrw-file-name").html(s),t<(a/1048576).toFixed(2)&&e.closest(".ovabrw-file").find(".ovabrw-file-name").html(o),-1==D.inArray(r,i)&&e.closest(".ovabrw-file").find(".ovabrw-file-name").html(n))})}),D('.ovabrw-modern-file input[type="file"]').each(function(){D(this).on("change",function(a){a.preventDefault();var e,t=D(this),o=t.data("max-file-size"),n=t.data("max-file-size-msg"),r=t.data("formats"),i=t.data("file-mimes"),s=[];"object"==typeof i&&D.each(i,function(a,e){s.push(e)}),t.closest(".ovabrw-modern-file").find(".ovabrw-file-name .name").html("").hide(),t.closest(".ovabrw-modern-file").find(".ovabrw-file-name .placeholder").show(),this.files[0]?(e=this.files[0].name,a=this.files[0].size,i=this.files[0].type,e&&a&&i&&(t.closest(".ovabrw-modern-file").find(".ovabrw-file-name .placeholder").hide(),t.closest(".ovabrw-modern-file").find(".ovabrw-file-name .name").html(e).css("display","block"),o<(a/1048576).toFixed(2)&&t.closest(".ovabrw-modern-file").find(".ovabrw-file-name .name").html(n),-1==D.inArray(i,s)&&t.closest(".ovabrw-modern-file").find(".ovabrw-file-name .name").html(r))):(t.closest(".ovabrw-modern-file").find(".ovabrw-file-name .name").html("").hide(),t.closest(".ovabrw-modern-file").find(".ovabrw-file-name .placeholder").show(),D(this).val(""))})}),D('.ovabrw-modern-deposit input[name="ova_type_deposit"]').on("change",function(){var a=D(this).closest(".ovabrw-modern-deposit").find('input[name="ova_type_deposit"]:checked').val();"full"==a&&(D(this).closest(".ovabrw-modern-deposit").find(".deposit-label").removeClass("active"),D(this).closest(".ovabrw-modern-deposit").find(".deposit-label.pay-full").addClass("active")),"deposit"==a&&(D(this).closest(".ovabrw-modern-deposit").find(".deposit-label").removeClass("active"),D(this).closest(".ovabrw-modern-deposit").find(".deposit-label.pay-deposit").addClass("active"))})},ova_collapsed:function(){D(".ovabrw-according").off().on("click",function(a){a.preventDefault(),D(this).siblings(".ovabrw_collapse_content").slideToggle()}),D(".ovabrw_open_popup").off().on("click",function(a){a.preventDefault(),D(this).siblings(".popup").css("display","block")}),D(".popup-close").on("click",function(a){a.preventDefault(),D(this).parent(".popup-inner").parent(".popup").css("display","none")}),D(".popup-close-2").on("click",function(a){a.preventDefault(),D(this).parent(".close_discount").parent(".popup-inner").parent(".popup").css("display","none")})},ova_startdate_perido_time:function(){D(".ovabrw_datetimepicker.startdate_perido_time").focus(function(a){D(this).blur()}),D("body").on("change",".startdate_perido_time",function(){var a=D(this);a.val()&&(a.closest("form").find(".show_ajax_content").removeClass("active"),a.closest("form").find(".show_total").html(""),T.ova_ajax_load_packages(a))})},ova_ajax_load_packages:function(e=null){var a,t;null!=e&&(a=e.val(),t=e.data("pid"),e.closest("form").find('select[name="ovabrw_period_package_id"]').attr("disabled","disabled"),D.ajax({url:ajax_object.ajax_url,type:"POST",data:{action:"ovabrw_get_package_by_time",startdate:a,post_id:t},success:function(a){e.closest("form").find('select[name="ovabrw_period_package_id"] option ').remove();var t="",a=D.parseJSON(a);a&&D.each(a,function(a,e){t+='<option value="'+a+'">'+e+"</option>"}),t&&e.closest("form").find('select[name="ovabrw_period_package_id"] ').append(t),e.closest("form").find('select[name="ovabrw_period_package_id"] ').hasClass("select2-hidden-accessible")&&e.closest("form").find('select[name="ovabrw_period_package_id"] ').select2(),e.closest("form").find('select[name="ovabrw_period_package_id"] ').prop("disabled",!1),e.closest("form").find(".show_ajax_content").removeClass("active"),e.closest("form").find(".show_total").html("")}}))},ova_ajax_show_total:function(){D("body").on("change","form#booking_form",function(){D(this).find('input[name="ovabrw_pickup_date"]').val()&&T.ova_ajax_show_total_after_load(D(this))}),D("form#booking_form").each(function(){var a,e,t=D(this);0!=t.data("run_ajax")&&(a=t.find('input[name="ovabrw_pickup_date"]').val(),e=t.find('input[name="ovabrw_pickoff_date"]').val(),a&&e&&T.ova_ajax_show_total_after_load(t))})},ova_ajax_show_total_after_load:function(t=null){var a,e,o,n,r,i,s,l,c,d,p,_,f,m,u,v,h,b,w=[],g=[],y=[],k=[],q={},x={};null!=t&&((h=t).find(".ajax_loading").addClass("active"),h.find('input[name="car_id"]').val()&&(i=h.find('input[name="car_id"]').val()),h.find('select[name="ovabrw_pickup_loc"]').val()&&(a=h.find('select[name="ovabrw_pickup_loc"]').val()),h.find('select[name="ovabrw_pickoff_loc"]').val()&&(e=h.find('select[name="ovabrw_pickoff_loc"]').val()),h.find('input[name="ovabrw_pickup_date"]').val()&&(o=h.find('input[name="ovabrw_pickup_date"]').val()),h.find('input[name="ovabrw_pickoff_date"]').val()&&(n=h.find('input[name="ovabrw_pickoff_date"]').val()),h.find('select[name="ovabrw_period_package_id"]').val()&&(s=h.find('select[name="ovabrw_period_package_id"]').val()),h.find('input[name="ovabrw_number_vehicle"]').val()&&(r=h.find('input[name="ovabrw_number_vehicle"]').val()),h.find('input[name="ova_type_deposit"]:checked').val()&&(l=h.find('input[name="ova_type_deposit"]:checked').val()),h.find('input[name="ovabrw-duration-map"]').val()&&(f=h.find('input[name="ovabrw-duration-map"]').val()),h.find('input[name="ovabrw-duration"]').val()&&(m=h.find('input[name="ovabrw-duration"]').val()),h.find('input[name="ovabrw-distance"]').val()&&(u=h.find('input[name="ovabrw-distance"]').val()),h.find('input[name="ovabrw_pickup_time"]').val()&&(_=h.find('input[name="ovabrw_pickup_time"]').val()),h.find('select[name="ovabrw_extra_time"]').val()&&(v=h.find('select[name="ovabrw_extra_time"]').val()),!h.find('input[name="data_custom_ckf"]')||(b=h.find('input[name="data_custom_ckf"]').data("ckf"))&&D.each(b,function(e,a){var t,o,n;"radio"!=a.type||0<(t=h.find('input[name="'+e+'"]:checked')).length&&(q[e]=t.val(),n=t.closest(".ovabrw-radio").find('input[name="'+e+"_qty["+t.val()+']"]').val(),parseInt(n)&&(x[e]=parseInt(n))),"checkbox"==a.type&&(o=[],h.find(".ovabrw-checkbox input[type=checkbox]:checked").each(function(){o.push(D(this).val());var a=D(this).closest(".ovabrw-checkbox").find('input[name="'+e+"_qty["+D(this).val()+']"]').val();parseInt(a)&&(x[D(this).val()]=parseInt(a))}),0<o.length&&(q[e]=o)),"select"!=a.type||(a=h.find('select[name="'+e+'"]').val())&&(q[e]=a,n=h.find('input[name="'+e+"_qty["+a+']"]').val(),parseInt(n)&&(x[a]=parseInt(n)))}),h.find(".ovabrw_resource input[type=checkbox]:checked").each(function(){var a;D(this).val()&&(w[D(this).data("resource_key")]=D(this).val(),a=D(this).closest(".item").find('input[name="ovabrw_resource_quantity['+D(this).data("resource_key")+']"]').val(),parseInt(a)&&(g[D(this).data("resource_key")]=parseInt(a)))}),c=D.extend({},w),p=D.extend({},g),h.find("select[name='ovabrw_service[]']").each(function(){var a;D(this).val()&&(y.push(D(this).val()),a=D(this).closest(".ovabrw-select").find('input[name="ovabrw_service_qty['+D(this).val()+']"]').val(),parseInt(a)&&(k[D(this).val()]=parseInt(a)))}),d=D.extend({},y),b=D.extend({},k),D.ajax({url:ajax_object.ajax_url,type:"POST",data:{action:"ovabrw_calculate_total",pickup_loc:a,dropoff_loc:e,pickup_date:o,package_id:s,dropoff_date:n,quantity:r,deposit:l,resources:JSON.stringify(c),resources_qty:JSON.stringify(p),services:JSON.stringify(d),services_qty:JSON.stringify(b),custom_ckf:JSON.stringify(q),custom_ckf_qty:JSON.stringify(x),id:i,duration_map:f,duration:m,distance:u,pickup_time:_,extra_time:v},success:function(a){var e=JSON.parse(a);0!=a?(t.find(".ajax_show_total").show(),t.find(".show_ajax_content").addClass("active"),t.find(".show_total").html("").append(e.line_total),e.error?(t.find(".show_ajax_content").removeClass("active"),t.find(".show_total").html(""),t.find(".ajax-show-error").html("").append(e.error).show()):(0<e.number_vehicle_available?(t.find(".show_availables_vehicle").html("").append(e.number_vehicle_available),t.find('input[name="ovabrw_number_vehicle"]').attr("max",e.number_vehicle_available)):(t.find(".show_availables_vehicle").html("").append(0),t.find('input[name="ovabrw_number_vehicle"]').attr("max",1)),t.find(".ajax-show-error").html("").hide())):(t.find(".ajax_show_total").hide(),t.find(".show_ajax_content").removeClass("active"),t.find(".show_total").html(""),t.find(".ajax-show-error").html("").hide()),h.find(".ajax_loading").removeClass("active")}}))},ova_quantity_fields:function(){D(".ovabrw-qty-control .ovabrw-qty-input").on("click",function(a){a.preventDefault();var e=D(this),a=e.closest(".ovabrw-qty-control").find(".ovabrw-is-open"),e=e.closest(".ovabrw-qty-control").find(".ovabrw-qty-dropdown");D(document).find(".ovabrw-qty-dropdown").removeClass("ovabrw-is-open"),a.length||e.addClass("ovabrw-is-open"),D(window).click(function(a){a=a.target.className;"qty-input"!=a&&"brwicon-down-arrow"!=a&&"ovabrw-qty-dropdown ovabrw-is-open"!=a&&"qty-btn minus"!=a&&"qty"!=a&&"qty-btn plus"!=a&&"flaticon-substract"!=a&&"flaticon-add"!=a&&D(document).find(".ovabrw-qty-dropdown").removeClass("ovabrw-is-open")})}),D('.ovabrw_resource input[type="checkbox"]:checked').each(function(){D(this).closest(".item").find(".ovabrw-qty-control").show()}),D('.ovabrw_resource input[type="checkbox"]').on("change",function(){D(this).is(":checked")?D(this).closest(".item").find(".ovabrw-qty-control").show():D(this).closest(".item").find(".ovabrw-qty-control").hide()}),D(".ovabrw_resource .ovabrw-qty-control .ovabrw-qty-dropdown .qty-btn.minus").on("click",function(a){a.preventDefault();var e=D(this).closest(".ovabrw-qty-control").find("input.qty-input").val();1<parseInt(e)&&(D(this).closest(".ovabrw-qty-control").find(".ovabrw-qty-dropdown .qty").text(parseInt(e)-1),D(this).closest(".ovabrw-qty-control").find("input.qty-input").val(parseInt(e)-1),a=D(this).closest(".item").find(".res-left input[type=checkbox]:checked").val(),e=D(this).closest("form#booking_form"),a&&e.length&&e.find('input[name="ovabrw_pickup_date"]').val()&&T.ova_ajax_show_total_after_load(e))}),D(".ovabrw_resource .ovabrw-qty-control .ovabrw-qty-dropdown .qty-btn.plus").on("click",function(a){a.preventDefault();var e=D(this).closest(".ovabrw-qty-control").find("input.qty-input").val(),a=D(this).closest(".ovabrw-qty-control").find("input.qty-input").attr("max");parseInt(a)>parseInt(e)&&(D(this).closest(".ovabrw-qty-control").find(".ovabrw-qty-dropdown .qty").text(parseInt(e)+1),D(this).closest(".ovabrw-qty-control").find("input.qty-input").val(parseInt(e)+1),a=D(this).closest(".item").find(".res-left input[type=checkbox]:checked").val(),e=D(this).closest("form#booking_form"),a&&e.length&&e.find('input[name="ovabrw_pickup_date"]').val()&&T.ova_ajax_show_total_after_load(e))}),D('.ovabrw-checkbox input[type="checkbox"]:checked').each(function(){D(this).closest(".ovabrw-checkbox").find(".ovabrw-qty-control").show()}),D('.ovabrw-checkbox input[type="checkbox"]').on("change",function(){D(this).is(":checked")?D(this).closest(".ovabrw-checkbox").find(".ovabrw-qty-control").show():D(this).closest(".ovabrw-checkbox").find(".ovabrw-qty-control").hide()}),D(".ovabrw-checkbox .ovabrw-qty-control .ovabrw-qty-dropdown .qty-btn.minus").on("click",function(a){a.preventDefault();var e=D(this).closest(".ovabrw-qty-control").find("input.qty-input").val();1<parseInt(e)&&(D(this).closest(".ovabrw-qty-control").find(".ovabrw-qty-dropdown .qty").text(parseInt(e)-1),D(this).closest(".ovabrw-qty-control").find("input.qty-input").val(parseInt(e)-1),a=D(this).closest(".ovabrw-checkbox").find(".ovabrw-label-field input[type=checkbox]:checked").val(),e=D(this).closest("form#booking_form"),a&&e.length&&e.find('input[name="ovabrw_pickup_date"]').val()&&T.ova_ajax_show_total_after_load(e))}),D(".ovabrw-checkbox .ovabrw-qty-control .ovabrw-qty-dropdown .qty-btn.plus").on("click",function(a){a.preventDefault();var e=D(this).closest(".ovabrw-qty-control").find("input.qty-input").val(),a=D(this).closest(".ovabrw-qty-control").find("input.qty-input").attr("max");parseInt(a)>parseInt(e)&&(D(this).closest(".ovabrw-qty-control").find(".ovabrw-qty-dropdown .qty").text(parseInt(e)+1),D(this).closest(".ovabrw-qty-control").find("input.qty-input").val(parseInt(e)+1),a=D(this).closest(".ovabrw-checkbox").find(".ovabrw-label-field input[type=checkbox]:checked").val(),e=D(this).closest("form#booking_form"),a&&e.length&&e.find('input[name="ovabrw_pickup_date"]').val()&&T.ova_ajax_show_total_after_load(e))}),D('.ovabrw-radio input[type="radio"]:checked').each(function(){D(this).closest(".ovabrw-radio").find(".ovabrw-qty-control").show()}),D('.ovabrw-radio input[type="radio"]').on("change",function(){D(this).closest(".rental_item").find(".ovabrw-qty-control").hide(),D(this).is(":checked")&&D(this).closest(".ovabrw-radio").find(".ovabrw-qty-control").show()}),D(".ovabrw-radio .ovabrw-qty-control .ovabrw-qty-dropdown .qty-btn.minus").on("click",function(a){a.preventDefault();var e=D(this).closest(".ovabrw-qty-control").find("input.qty-input").val();1<parseInt(e)&&(D(this).closest(".ovabrw-qty-control").find(".ovabrw-qty-dropdown .qty").text(parseInt(e)-1),D(this).closest(".ovabrw-qty-control").find("input.qty-input").val(parseInt(e)-1),a=D(this).closest(".ovabrw-radio").find(".ovabrw-label-field input[type=radio]:checked").val(),e=D(this).closest("form#booking_form"),a&&e.length&&e.find('input[name="ovabrw_pickup_date"]').val()&&T.ova_ajax_show_total_after_load(e))}),D(".ovabrw-radio .ovabrw-qty-control .ovabrw-qty-dropdown .qty-btn.plus").on("click",function(a){a.preventDefault();var e=D(this).closest(".ovabrw-qty-control").find("input.qty-input").val(),a=D(this).closest(".ovabrw-qty-control").find("input.qty-input").attr("max");parseInt(a)>parseInt(e)&&(D(this).closest(".ovabrw-qty-control").find(".ovabrw-qty-dropdown .qty").text(parseInt(e)+1),D(this).closest(".ovabrw-qty-control").find("input.qty-input").val(parseInt(e)+1),a=D(this).closest(".ovabrw-radio").find(".ovabrw-label-field input[type=radio]:checked").val(),e=D(this).closest("form#booking_form"),a&&e.length&&e.find('input[name="ovabrw_pickup_date"]').val()&&T.ova_ajax_show_total_after_load(e))}),D(".ovabrw-select select").each(function(){var a;D(this).val()&&(a=D(this).attr("name"),D(this).closest(".ovabrw-select").find('input[name="'+a+"_qty["+D(this).val()+']"]').closest(".ovabrw-qty-control").show(),D(this).closest(".ovabrw-select").find('input[name="'+a.replace("[]","")+"_qty["+D(this).val()+']"]').closest(".ovabrw-qty-control").show())}),D(".ovabrw-select select").on("change",function(){var a;D(this).closest(".ovabrw-select").find(".ovabrw-qty-control").hide(),D(this).val()&&(a=D(this).attr("name"),D(this).closest(".ovabrw-select").find('input[name="'+a+"_qty["+D(this).val()+']"]').closest(".ovabrw-qty-control").show(),D(this).closest(".ovabrw-select").find('input[name="'+a.replace("[]","")+"_qty["+D(this).val()+']"]').closest(".ovabrw-qty-control").show())}),D(".ovabrw-select .ovabrw-qty-control .ovabrw-qty-dropdown .qty-btn.minus").on("click",function(a){a.preventDefault();var e=D(this).closest(".ovabrw-qty-control").find("input.qty-input").val();1<parseInt(e)&&(D(this).closest(".ovabrw-qty-control").find(".ovabrw-qty-dropdown .qty").text(parseInt(e)-1),D(this).closest(".ovabrw-qty-control").find("input.qty-input").val(parseInt(e)-1),a=D(this).closest(".ovabrw-select").find("select").val(),e=D(this).closest("form#booking_form"),a&&e.length&&e.find('input[name="ovabrw_pickup_date"]').val()&&T.ova_ajax_show_total_after_load(e))}),D(".ovabrw-select .ovabrw-qty-control .ovabrw-qty-dropdown .qty-btn.plus").on("click",function(a){a.preventDefault();var e=D(this).closest(".ovabrw-qty-control").find("input.qty-input").val(),a=D(this).closest(".ovabrw-qty-control").find("input.qty-input").attr("max");parseInt(a)>parseInt(e)&&(D(this).closest(".ovabrw-qty-control").find(".ovabrw-qty-dropdown .qty").text(parseInt(e)+1),D(this).closest(".ovabrw-qty-control").find("input.qty-input").val(parseInt(e)+1),a=D(this).closest(".ovabrw-select").find("select").val(),e=D(this).closest("form#booking_form"),a&&e.length&&e.find('input[name="ovabrw_pickup_date"]').val()&&T.ova_ajax_show_total_after_load(e))})},ova_search_map:function(){var o=parseInt(D(document).find(".wrap_search_map .wrap_search .search_result").attr("data-zoom")),t=D(document).find(".wrap_search_map .wrap_search .search_result").attr("data-default-location"),n=parseFloat(D(document).find(".wrap_search_map .wrap_search .search_result").attr("data-lat")),r=parseFloat(D(document).find(".wrap_search_map .wrap_search .search_result").attr("data-lng")),h=D(document).find(".wrap_search_map .wrap_search .search_result").attr("data-marker_option"),b=D(document).find(".wrap_search_map .wrap_search .search_result").attr("data-marker_icon");function k(){var m,a=[],e=[];D(document).find(".data_product").each(function(){a.push(JSON.parse(JSON.stringify({title:D(this).attr("data-title_product"),link:D(this).attr("data-link_product"),price:D(this).attr("data-html_price"),average_rating:D(this).attr("data-average_rating"),number_comment:D(this).attr("data-number_comment"),thumbnail:D(this).attr("data-thumbnail_product"),lat:D(this).attr("data-map_lat_product"),lng:D(this).attr("data-map_lng_product")}))),e.push(JSON.parse(JSON.stringify({lat:parseFloat(D(this).attr("data-map_lat_product")),lng:parseFloat(D(this).attr("data-map_lng_product"))})))}),m="yes"===t?new google.maps.Map(document.getElementById("show_map"),{center:{lat:parseFloat(n),lng:parseFloat(r)},zoom:o,gestureHandling:"cooperative"}):(e=function(e){if(1==e.length)return e[0];var a=e.length;let t=0,o=0,n=0;for(let a=0;a<e.length;a++){var r=e[a].lat*Math.PI/180,i=e[a].lng*Math.PI/180,s=Math.cos(r)*Math.cos(i),l=Math.cos(r)*Math.sin(i),c=Math.sin(r);t+=s,o+=l,n+=c}return t/=a,o/=a,n/=a,i=Math.atan2(o,t),a=Math.sqrt(t*t+o*o),{lat:180*(r=Math.atan2(n,a))/Math.PI,lng:180*i/Math.PI}}(e),isNaN(e.lat)||isNaN(e.lng)?new google.maps.Map(document.getElementById("show_map"),{center:{lat:parseFloat(n),lng:parseFloat(r)},zoom:o,gestureHandling:"cooperative"}):new google.maps.Map(document.getElementById("show_map"),{center:{lat:parseFloat(e.lat),lng:parseFloat(e.lng)},zoom:o,gestureHandling:"cooperative"}));var u=new google.maps.InfoWindow,v=new OverlappingMarkerSpiderfier(m,{markersWontMove:!0,markersWontHide:!0,basicFormatEvents:!0});a.map(function(a,e){var t=parseFloat(a.lat),o=parseFloat(a.lng),n=a.average_rating,r=Math.floor(n),i=5-Math.ceil(n),s=a.number_comment,l="";if(0<r)for(var c=1;c<=r;c++)l+='<i class="fa fa-star"></i>';if(r!=Math.ceil(n)&&(l+='<i class="fa fa-star-half-alt"></i>'),0<i)for(var d=1;d<=i;d++)l+='<i class="fa fa-star-o"></i>';var p="";0!=s&&(p+='<span class="number second_font">('+a.number_comment+")</span>");var _,f='<div class="data_product_map"><a href="'+a.link+'"><img style="max-width: 100%; width: 280px;" src="'+a.thumbnail+'" ><h2 class="title"><a href="'+a.link+'">'+a.title+"</a></h2>"+a.price+'<div class="product_ratting"><span class="star">'+(l=!n||0==n?"":l)+"</span> "+p+" </div></a></div>",o=new google.maps.LatLng(t,o);"icon"==h&&(_=new google.maps.Marker({position:o,icon:b})),google.maps.event.addListener(_,"spider_click",function(a){u.setContent(f),u.open(m,_)}),v.addMarker(_)});window.map=m,window.oms=v}function i(){var a,e,t,o,n,r,i,s,l,c,d,p,_,f,m,u,v,h,b,w,g,y=D(document).find(".wrap_search_map");y.length&&(a=y.find('[name="ovabrw_name_product"]').val(),e=y.find('[name="cat"]').val(),t=y.find('[name="sort"]').val(),o=y.find('[name="radius"]').val(),n=y.find('[name="map_lat"]').val(),r=y.find('[name="map_lng"]').val(),i=y.find('[name="ovabrw_pickup_loc"]').val(),s=y.find('[name="ovabrw_dropoff_loc"]').val(),l=y.find('[name="ovabrw_pickup_date"]').val(),c=y.find('[name="ovabrw_pickoff_date"]').val(),d=y.find(".search_result").attr("data-card"),p=y.find(".search_result").attr("data-column"),_=y.find(".search_result").attr("data-order"),f=y.find(".search_result").attr("data-orderby"),m=y.find(".search_result").attr("data-per_page"),u=y.find(".ovabrw_pagination_ajax .current").attr("data-paged"),v=y.find('[name="ovabrw_attribute"]').val(),g=y.find('[name="ovabrw_attribute_value"]').val(),w=y.find('[name="ovabrw_tag_product"]').val(),h=y.find(".search_result"),D(document).find(".wrap_search_map .wrap_load_more").show(),D(document).find(".wrap_search_map .ovabrw_product_archive").hide(),b={action:"ovabrw_search_map",name:a,cat:e,radius:o,map_lat:n,map_lng:r,pickup_loc:i,dropoff_loc:s,start_date:l,end_date:c,sort:t,card:d,column:p,order:_,orderby:f,per_page:m,paged:u,attribute:v,attr_value:g,tags:w},g="",(w=y.find('[name="data_taxonomy_custom"]').val())&&(b.taxonomies=w,g=JSON.parse(w),D.each(g,function(a,e){b[a]=y.find('[name="'+a+'_name"]').val()})),D.ajax({url:ajax_object.ajax_url,type:"POST",data:b,success:function(a){var e;a&&(e=JSON.parse(a),a=D(e.result).fadeOut(300).fadeIn(500),h.html(a),D(document).find(".wrap_search_filter_title .results_found").html(e.results_found),D(document).find(".wrap_search_map .wrap_load_more").hide(),"undefined"!=typeof google&&0<D("#show_map").length&&k(),T.ova_slide_image())}}))}function s(){var a=document.getElementById("pac-input"),t="";""!==(t=a?new google.maps.places.Autocomplete(a):t)&&t.addListener("place_changed",function(){var a,e=t.getPlace();e.geometry&&(D("#show_map").length&&new google.maps.Map(document.getElementById("show_map"),{center:{lat:parseFloat(e.geometry.location.lat()),lng:parseFloat(e.geometry.location.lng())},zoom:o,gestureHandling:"cooperative"}),D("#map_name").val(e.name),D("#map_address").val(e.formatted_address),D("#map_lat").val(e.geometry.location.lat()),D("#map_lng").val(e.geometry.location.lng()),(a={}).lat=e.geometry.location.lat(),a.lng=e.geometry.location.lng(),D(document).find(".wrap_search_map .wrap_load_more").show(),D(document).find(".wrap_search_map .wrap_search_radius").show(),D(document).find(".wrap_search_map .ovabrw_product_archive").hide(),i())})}D("#pac-input").length&&s(),0<D(".wrap_search_map .show_taxonomy").length&&("yes"==D(".wrap_search_map .show_taxonomy").attr("data-show_taxonomy")?D(".wrap_search_map .wrap_search_taxonomies").hide():D(".wrap_search_map .wrap_search_taxonomies").show()),D.fn.event_map=function(a){var e;a=D.extend({lat:n,lng:r,zoom:o},a),D("#pac-input").length&&(e=[],D(".data_product").each(function(){e.push(JSON.parse(JSON.stringify({title:D(this).attr("data-title_product"),thumbnail:D(this).attr("data-thumbnail_product"),average_rating:D(this).attr("data-average_rating"),number_comment:D(this).attr("data-number_comment"),lat:D(this).attr("data-map_lat_product"),lng:D(this).attr("data-map_lng_product"),link:D(this).attr("data-link_product")})))}),"undefined"!=typeof google&&0<D("#show_map").length&&(k(),s()))},"undefined"!=typeof google&&0<D("#show_map").length&&(c=parseFloat(D("input#map_lat").val()?D("input#map_lat").val():n),d=parseFloat(D("input#map_lng").val()?D("input#map_lng").val():r),l=D(window).height(),D("#show_map").css("height",l),navigator.geolocation&&navigator.geolocation.getCurrentPosition(_),D("#show_map").event_map({lat:c,lng:d,zoom:o})),D('.wrap_search_map [name="ovabrw_name_product"]').on("change",function(a){i()}),D('.wrap_search_map [name="cat"]').on("change",function(a){"yes"==D(".wrap_search_map .show_taxonomy").attr("data-show_taxonomy")?D(".wrap_search_map .wrap_search_taxonomies").hide():D(".wrap_search_map .wrap_search_taxonomies").show(),m(D(".wrap_search_map"),D(this).val()),i()}),D('.wrap_search_map [name="ovabrw_pickup_loc"], .wrap_search_map [name="ovabrw_dropoff_loc"]').on("change",function(a){i()}),D('.wrap_search_map [name="ovabrw_pickup_date"], .wrap_search_map [name="ovabrw_pickoff_date"]').on("change",function(a){i()}),D('.wrap_search_map [name="ovabrw_attribute"], .wrap_search_map [name="ovabrw_attribute_value"]').on("change",function(a){i()}),D('.wrap_search_map [name="ovabrw_tag_product"]').on("change",function(a){i()});var a=D('.wrap_search_map [name="data_taxonomy_custom"]').val();a&&(p=JSON.parse(a),D.each(p,function(a,e){D('.wrap_search_map [name="'+a+'_name"]').on("change",function(a){i()})})),D('.wrap_search_map [name="sort"]').on("change",function(a){i()});var e=0,l=100,c=50,d=parseInt(D(document).find(".wrap_search_map .wrap_search_radius").attr("data-map_range_radius")),a=parseInt(D(document).find(".wrap_search_map .wrap_search_radius").attr("data-map_range_radius_min")),p=parseInt(D(document).find(".wrap_search_map .wrap_search_radius").attr("data-map_range_radius_max"));function _(a){var e=a.coords.latitude,a=a.coords.longitude;D('[name="map_lat"]').attr("value",e),D('[name="map_lng"]').attr("value",a);a={lat:parseFloat(e),lng:parseFloat(a)};(new google.maps.Geocoder).geocode({location:a},function(a,e){"OK"===e?a[0]?(D('.wrap_search_map [name="map_address"]').val(a[0].formatted_address),D(document).find(".wrap_search_map .wrap_search_radius").show()):(window.alert("No results found"),D(document).find(".wrap_search_map .wrap_search_radius").hide()):(D(document).find(".wrap_search_map .wrap_search_radius").hide(),window.alert("Geocoder failed due to: "+e))}),i()}function f(){D(window).width()<1024?D(document).find(".wrap_search_map #show_map").css({height:"100%",width:"100%","min-height":"600px"}):D(document).find(".wrap_search_map #show_map").css({height:D(window).height(),width:"100%"})}void 0!==a&&(e=a),void 0!==p&&(l=p),void 0!==d&&(c=d),0<D("#wrap_pointer").length?D("#wrap_pointer").slider({min:e,max:l,step:1,value:c,change:function(a,e){D(this).parents(".wrap_search_map").find('[name="radius"]').val(e.value),D(this).parents(".wrap_search_map").find(".result_radius").html(e.value+"km"),i()}}):i(),D(document).on("click",".wrap_search_map .ovabrw_pagination_ajax .page-numbers",function(a){a.preventDefault();a=D(this);D(".wrap_search_map .ovabrw_pagination_ajax .current").attr("data-paged")!=a.attr("data-paged")&&(D(window).scrollTop(0),D(".wrap_search_map .ovabrw_pagination_ajax .page-numbers").removeClass("current"),a.addClass("current"),i())}),D(document).on("click",".wrap_search_map .locate_me",function(){navigator.geolocation?navigator.geolocation.getCurrentPosition(_):x.innerHTML="Geolocation is not supported by this browser."}),D(".wrap_search_map .toggle_filters").off().on("click",function(){D(this).parents(".wrap_search_map").find(".form_search_map").slideToggle(300),D(this).find(".icon_down").toggle(300),D(this).find(".icon_up").toggle(300),D(this).toggleClass("active")}),D(".elementor_search_map .toggle_wrap span").on("click",function(){var a=D(this).attr("data-value");D(".wrap_search_map .wrap_search, .wrap_search_map .wrap_map").hide(),D("."+a).show(),D(".elementor_search_map .toggle_wrap span").removeClass("active"),D(this).addClass("active")}),f(),D(window).resize(function(){1024<=D(window).width()&&(D(document).find(".wrap_search_map .wrap_search").show(),D(document).find(".wrap_search_map .wrap_map").show()),f()}),D("#show_map").parents().filter(function(){"hidden"!=D(this).css("overflow")&&"hidden auto"!=D(this).css("overflow")||D(this).css("overflow","visible")})},ova_taxi_location:function(){var a=D(document).find('input[name="ovabrw-data-location"]'),o=a.data("waypoint-text"),n=a.data("max-waypoint"),r=0,i=[],s={fields:["formatted_address","geometry"]},u=a.data("price-by"),e=a.data("map-types"),t=a.data("bounds"),l=a.data("bounds-lat"),c=a.data("bounds-lng"),d=a.data("bounds-radius"),a=a.data("restrictions");function p(a){let e="",t=0;for(var o="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",n=o.length;t<a;)e+=o.charAt(Math.floor(Math.random()*n)),t+=1;return e}function _(){D(document).find(".btn-remove-waypoint").off().on("click",function(){n&&--r<n&&(D(document).find(".form-location-field .btn-add-waypoint").show(),D(document).find("body.rtl.ovabrw-modern").length?D(document).find(".form-location-field .btn-remove-waypoint").css("left","45px"):D(document).find(".form-location-field .btn-remove-waypoint").css("right","45px")),D(this).closest(".form-location-field").remove(),m()})}function f(){"undefined"!=typeof google&&D(document).find('input[name="ovabrw_waypoint_address[]"]').each(function(){var t=D(this),a=t.attr("id"),a=document.getElementById(a),o=new google.maps.places.Autocomplete(a,s);o.addListener("place_changed",function(){var a=o.getPlace(),e=a.formatted_address,e={lat:a.geometry.location.lat(),lng:a.geometry.location.lng(),formatted_address:e};t.closest(".form-location-field").find('input[name="ovabrw_waypoint_data[]"]').val(JSON.stringify(e)),m()})})}function m(){if("undefined"!=typeof google){var s=D("#booking_form .ovabrw-directions"),a=D('#booking_form input[name="ovabrw-data-location"]').data("lat"),e=D('#booking_form input[name="ovabrw-data-location"]').data("lng"),l=D('#booking_form input[name="ovabrw-data-location"]').data("zoom"),c=D('#booking_form input[name="ovabrw_origin"]').val(),d=D('#booking_form input[name="ovabrw_destination"]').val(),p=D('#booking_form select[name="ovabrw_extra_time"]').val(),_=[],p=p||0;if(D('#booking_form input[name="ovabrw_waypoint_data[]"]').each(function(){_.push({location:D(this).val(),stopover:!0})}),c&&d){s.css("display","block");let t=0,o=0,n,r,i;const f=new google.maps.DirectionsService,m=new google.maps.DirectionsRenderer;e=new google.maps.Map(document.getElementById("ovabrw_map"),{zoom:l,center:{lat:a,lng:e}});m.setMap(e),f.route({origin:c,destination:d,waypoints:_,optimizeWaypoints:!0,travelMode:google.maps.TravelMode.DRIVING}).then(a=>{m.setDirections(a);var e=a.routes[0];for(let a=0;a<e.legs.length;a++)t+=e.legs[a].distance.value,o+=e.legs[a].duration.value;t=t||0,o=o||0,D('#booking_form input[name="ovabrw-distance"]').val(t),D('#booking_form input[name="ovabrw-duration-map"]').val(o),n=parseFloat(3600*p)+parseInt(o),D('#booking_form input[name="ovabrw-duration"]').val(n),r=parseInt(n/3600),i=Math.round(n%3600/60),"km"===u?s.find(".distance-value").html("").append((t/1e3).toFixed(2)):s.find(".distance-value").html("").append((t/1609.34).toFixed(2)),s.find(".hour").html("").append(r),s.find(".minute").html("").append(i),T.ova_ajax_show_total_after_load(D("#booking_form"))}).catch(a=>window.alert("Directions request failed!"))}else s.hide()}}e&&(s.types=e),"on"==t&&l&&c&&d&&(k=new google.maps.Circle({center:new google.maps.LatLng(l,c),radius:d}),s.bounds=k.getBounds(),s.strictBounds=!0),a&&D.isArray(a)&&(s.componentRestrictions={country:a}),function t(){D(document).find(".btn-add-waypoint").off().on("click",function(){if(n&&r==n)return!1;for(var a=p(16);-1!==D.inArray(a,i);)a=p(16);var e='<div class="rental_item form-location-field">';e+="<label>"+o+"</label>",e+='<input type="text" id="ovabrw_waypoint_loc_'+a+'" name="ovabrw_waypoint_address[]" autocomplete="off">',e+='<input type="hidden" name="ovabrw_waypoint_data[]" value="">',e+='<i aria-hidden="true" class="flaticon-substract btn-remove-waypoint"></i>',e+='<i aria-hidden="true" class="flaticon-add btn-add-waypoint"></i>',e+="</div>",D(this).closest(".form-location-field").after(e),n&&(r+=1)==n&&(D(document).find(".form-location-field .btn-add-waypoint").hide(),D(document).find("body.rtl.ovabrw-modern").length?D(document).find(".form-location-field .btn-remove-waypoint").css("left","13px"):D(document).find(".form-location-field .btn-remove-waypoint").css("right","13px")),t(),_(),f()})}(),_(),function(){if("undefined"!=typeof google&&D("#ovabrw_pickup_loc").length&&D("#ovabrw_pickoff_loc").length){var a=document.getElementById("ovabrw_pickup_loc"),e=document.getElementById("ovabrw_pickoff_loc");const t=new google.maps.places.Autocomplete(a,s);t.addListener("place_changed",function(){var a=t.getPlace(),e=a.formatted_address,e={lat:a.geometry.location.lat(),lng:a.geometry.location.lng(),formatted_address:e};D(document).find('input[name="ovabrw_origin"]').val(JSON.stringify(e)),D(document).find('input[name="ovabrw_pickoff_loc"]').focus(),m()});const o=new google.maps.places.Autocomplete(e,s);o.addListener("place_changed",function(){var a=o.getPlace(),e=a.formatted_address,e={lat:a.geometry.location.lat(),lng:a.geometry.location.lng(),formatted_address:e};D(document).find('input[name="ovabrw_destination"]').val(JSON.stringify(e)),m()})}}(),D('#booking_form select[name="ovabrw_extra_time"]').on("change",function(){var a=(a=D(this).val())||0,e=(e=D('#booking_form input[name="ovabrw-duration-map"]').val())||0,t=parseFloat(3600*a)+parseInt(e),a=parseInt(t/3600),e=Math.round(t%3600/60);D('#booking_form input[name="ovabrw-duration"]').val(t),D("#booking_form .ovabrw-directions .hour").html("").append(a),D("#booking_form .ovabrw-directions .minute").html("").append(e),T.ova_ajax_show_total_after_load(D("#booking_form"))});var t=D(document).find('input[name="ovabrw-req-data-location"]'),v=t.data("waypoint-text"),h=t.data("max-waypoint"),b=0,w=[],g={fields:["formatted_address","geometry"]},y=t.data("price-by"),l=t.data("map-types"),c=t.data("bounds"),d=t.data("bounds-lat"),k=t.data("bounds-lng"),a=t.data("bounds-radius"),t=t.data("restrictions");function q(){D(document).find(".btn-req-remove-waypoint").off().on("click",function(){h&&--b<h&&(D(document).find(".form-location-field .btn-req-add-waypoint").show(),D(document).find("body.rtl.ovabrw-modern").length?D(document).find(".form-location-field .btn-req-remove-waypoint").css("left","45px"):D(document).find(".form-location-field .btn-req-remove-waypoint").css("right","45px")),D(this).closest(".form-location-field").remove(),M()})}function x(){"undefined"!=typeof google&&D(document).find('input[name="ovabrw_req_waypoint_address[]"]').each(function(){var t=D(this),a=t.attr("id"),a=document.getElementById(a),o=new google.maps.places.Autocomplete(a,s);o.addListener("place_changed",function(){var a=o.getPlace(),e=a.formatted_address,e={lat:a.geometry.location.lat(),lng:a.geometry.location.lng(),formatted_address:e};t.closest(".form-location-field").find('input[name="ovabrw_req_waypoint_data[]"]').val(JSON.stringify(e)),m()})})}function M(){if("undefined"!=typeof google){var s=D("#request_booking .ovabrw-req-directions"),a=D('#request_booking input[name="ovabrw-req-data-location"]').data("lat"),e=D('#request_booking input[name="ovabrw-req-data-location"]').data("lng"),l=D('#request_booking input[name="ovabrw-req-data-location"]').data("zoom"),c=D('#request_booking input[name="ovabrw_req_origin"]').val(),d=D('#request_booking input[name="ovabrw_req_destination"]').val(),p=D('#request_booking select[name="ovabrw_req_extra_time"]').val(),_=[],p=p||0;if(D('#request_booking input[name="ovabrw_req_waypoint_data[]"]').each(function(){_.push({location:D(this).val(),stopover:!0})}),c&&d){s.css("display","block");let t=0,o=0,n,r,i;const f=new google.maps.DirectionsService,m=new google.maps.DirectionsRenderer;e=new google.maps.Map(document.getElementById("ovabrw_req_map"),{zoom:l,center:{lat:a,lng:e}});m.setMap(e),f.route({origin:c,destination:d,waypoints:_,optimizeWaypoints:!0,travelMode:google.maps.TravelMode.DRIVING}).then(a=>{m.setDirections(a);var e=a.routes[0];for(let a=0;a<e.legs.length;a++)t+=e.legs[a].distance.value,o+=e.legs[a].duration.value;t=t||0,o=o||0,D('#request_booking input[name="ovabrw-req-distance"]').val(t),D('#request_booking input[name="ovabrw-req-duration-map"]').val(o),n=parseFloat(3600*p)+parseInt(o),D('#request_booking input[name="ovabrw-req-duration"]').val(n),r=parseInt(n/3600),i=Math.round(n%3600/60),"km"===y?s.find(".distance-value").html("").append((t/1e3).toFixed(2)):s.find(".distance-value").html("").append((t/1609.34).toFixed(2)),s.find(".hour").html("").append(r),s.find(".minute").html("").append(i)}).catch(a=>window.alert("Directions request failed!"))}else s.hide()}}l&&(g.types=l),"on"==c&&d&&k&&a&&(a=new google.maps.Circle({center:new google.maps.LatLng(d,k),radius:a}),g.bounds=a.getBounds(),g.strictBounds=!0),t&&D.isArray(t)&&(g.componentRestrictions={country:t}),function t(){D(document).find(".btn-req-add-waypoint").off().on("click",function(){if(h&&b==h)return!1;for(var a=p(16);-1!==D.inArray(a,w);)a=p(16);var e='<div class="rental_item form-location-field">';e+="<label>"+v+"</label>",e+='<input type="text" id="ovabrw_req_waypoint_loc_'+a+'" name="ovabrw_req_waypoint_address[]" autocomplete="off">',e+='<input type="hidden" name="ovabrw_req_waypoint_data[]" value="">',e+='<i aria-hidden="true" class="flaticon-substract btn-req-remove-waypoint"></i>',e+='<i aria-hidden="true" class="flaticon-add btn-req-add-waypoint"></i>',e+="</div>",D(this).closest(".form-location-field").after(e),h&&(b+=1)==h&&(D(document).find(".form-location-field .btn-req-add-waypoint").hide(),D(document).find("body.rtl.ovabrw-modern").length?D(document).find(".form-location-field .btn-req-remove-waypoint").css("left","13px"):D(document).find(".form-location-field .btn-req-remove-waypoint").css("right","13px")),t(),q(),x()})}(),q(),function(){if("undefined"!=typeof google&&D("#ovabrw_req_pickup_loc").length&&D("#ovabrw_req_pickoff_loc").length){var a=document.getElementById("ovabrw_req_pickup_loc"),e=document.getElementById("ovabrw_req_pickoff_loc");const t=new google.maps.places.Autocomplete(a,g);t.addListener("place_changed",function(){var a=t.getPlace(),e=a.formatted_address,e={lat:a.geometry.location.lat(),lng:a.geometry.location.lng(),formatted_address:e};D(document).find('input[name="ovabrw_req_origin"]').val(JSON.stringify(e)),D(document).find('input[name="ovabrw_req_pickoff_loc"]').focus(),M()});const o=new google.maps.places.Autocomplete(e,g);o.addListener("place_changed",function(){var a=o.getPlace(),e=a.formatted_address,e={lat:a.geometry.location.lat(),lng:a.geometry.location.lng(),formatted_address:e};D(document).find('input[name="ovabrw_req_destination"]').val(JSON.stringify(e)),M()})}}(),D('#request_booking select[name="ovabrw_req_extra_time"]').on("change",function(){var a=(a=D(this).val())||0,e=(e=D('#request_booking input[name="ovabrw-req-duration-map"]').val())||0,t=parseFloat(3600*a)+parseInt(e),a=parseInt(t/3600),e=Math.round(t%3600/60);D('#request_booking input[name="ovabrw-req-duration"]').val(t),D("#request_booking .ovabrw-req-directions .hour").html("").append(a),D("#request_booking .ovabrw-req-directions .minute").html("").append(e)})},ova_slide_image:function(){D(".ovabrw-gallery-popup .ovabrw-gallery-slideshow").each(function(){var a=D(this),e=a.data("options")?a.data("options"):{};a.owlCarousel({autoWidth:e.autoWidth,margin:e.margin,items:e.items,loop:e.loop,autoplay:e.autoplay,autoplayTimeout:e.autoplayTimeout,center:e.center,lazyLoad:e.lazyLoad,nav:e.nav,dots:e.dots,autoplayHoverPause:e.autoplayHoverPause,slideBy:e.slideBy,smartSpeed:e.smartSpeed,rtl:e.rtl,navText:['<i aria-hidden="true" class="'+e.nav_left+'"></i>','<i aria-hidden="true" class="'+e.nav_right+'"></i>'],responsive:e.responsive}),a.find(".gallery-fancybox").off("click").on("click",function(){var a=D(this).data("index"),e=D(this).closest(".ovabrw-gallery-popup").find(".ovabrw-data-gallery").data("gallery");Fancybox.show(e,{Image:{Panzoom:{zoomFriction:.7,maxScale:function(){return 3}}},startIndex:a})})}),D(".ovabrw-product-images .product-gallery").each(function(){var a=D(this),e=a.data("options")?a.data("options"):{},t={0:{items:2,slideBy:1},768:{items:3,slideBy:1},1024:{items:e.items,slideBy:e.slideBy}};a.owlCarousel({items:e.items,slideBy:e.slideBy,margin:e.margin,autoplayHoverPause:e.autoplayHoverPause,loop:e.loop,autoplay:e.autoplay,autoplayTimeout:e.autoplayTimeout,smartSpeed:e.smartSpeed,rtl:e.rtl,nav:!1,dots:!1,responsive:t}),D(".ovabrw-product-images .gallery-fancybox").off("click").on("click",function(){var a=D(this),e=a.data("index"),a=a.closest(".ovabrw-product-images").find(".data-gallery").data("gallery");Fancybox.show(a,{Image:{Panzoom:{zoomFriction:.7,maxScale:function(){return 3}}},startIndex:e})})})},ova_modern_product:function(){function a(a){a&&(a.val()?a.css("color",ovabrwTextColor):a.css("color",ovabrwLightColor))}"undefined"!=typeof ovabrwLightColor&&"undefined"!=typeof ovabrwTextColor&&D(document).find(".ovabrw-modern-product select, .ovabrw-search-modern select, .ovabrw_wd_search select").each(function(){a(D(this)),D(this).on("change",function(){a(D(this))})}),D(".ovabrw-product-form-tabs .ovabrw-tab-head .item-tab").on("click",function(a){a.preventDefault(),D(this).hasClass("active")||(D(this).closest(".ovabrw-tab-head").find(".item-tab").removeClass("active"),D(this).addClass("active"),a=D(this).data("id"),D(this).closest(".ovabrw-product-form-tabs").find(".item-content").removeClass("active"),D(this).closest(".ovabrw-product-form-tabs").find("#"+a).addClass("active"))})}};function m(o,a){"undefined"!=typeof ova_brw_search_show_tax_depend_cat&&o.length&&("yes"==ova_brw_search_show_tax_depend_cat?o.find(".s_field_cus_tax").hide():o.find(".s_field_cus_tax").show()),a&&D.ajax({url:ajax_object.ajax_url,type:"POST",data:{action:"ovabrw_get_tax_in_cat",cat_val:a},success:function(a){if(a){var e=a.split(",");if(e.length)for(var t=0;t<e.length;t++)0<o.find("."+e[t]).length&&o.find("."+e[t]).show()}}})}function a(){var b="";"undefined"!=typeof brw_date_format&&(b=brw_date_format),D(".wrap_calendar").each(function(a){D(this).data("id");var e,t,o,n,l,r,c,d,f,m,u,v,i,p,s,h=D(this).find(".ovabrw__product_calendar")[0];function _(){D(document).find(".wrap_calendar .fc-bg-event.fc-event").each(function(){D(this).closest(".fc-daygrid-day-frame").find(".fc-daygrid-day-number").css("color","#FFF"),D(this).closest(".fc-daygrid-day-frame").find(".fc-daygrid-day-bg").css("color","#FFF")})}null!==h&&(e=h.getAttribute("data-nav"),t=h.getAttribute("data-default_view"),o=h.getAttribute("data-first-day")||0,"month"==t&&(t="dayGridMonth"),n=h.getAttribute("data-lang").replace(/\s/g,""),l=h.getAttribute("data-define_day"),r=parseInt(h.getAttribute("data_event_number")),c=h.getAttribute("default_hour_start"),d=h.getAttribute("time_to_book_start"),d=T.ova_get_time_to_book_start(d),s=(s=h.getAttribute("price_calendar")).replace(/[\u0000-\u001F]+/g,""),f=JSON.parse(s),i=h.getAttribute("data-special-time"),m=JSON.parse(i),u=h.getAttribute("data-background-day"),s=h.getAttribute("data-disable_week_day"),v="",s&&(v=JSON.parse(s)),i="",p=[],void 0!==(i=(s=h.getAttribute("order_time"))&&0<s.length?JSON.parse(s):i)&&0<i.length&&i.forEach(function(a,e){a.hasOwnProperty("rendering")&&p.push(a.start)}),new FullCalendar.Calendar(h,{editable:!1,events:i,firstDay:o,height:"auto",headerToolbar:{left:"prev,next,today,"+e,right:"title"},initialView:t,locale:n,dayMaxEventRows:!0,views:{dayGrid:{dayMaxEventRows:r},timeGrid:{dayMaxEventRows:r},week:{dayMaxEventRows:r},day:{dayMaxEventRows:r}},dayCellDidMount:function(o){var a,n=new Date(o.date),r=Date.UTC(n.getFullYear(),n.getMonth(),n.getDate())/1e3;if(""!=f){if("day"==(a=f[0].type_price)){var e=f[1].ovabrw_daily_monday,i=f[1].ovabrw_daily_tuesday,s=f[1].ovabrw_daily_wednesday,l=f[1].ovabrw_daily_thursday,c=f[1].ovabrw_daily_friday,d=f[1].ovabrw_daily_saturday,p=f[1].ovabrw_daily_sunday;switch(n.getDay()){case 0:{v&&D.each(v,function(a,e){e==n.getDay()&&(o.el.children[0].className=o.el.children[0].className+" unavailable_date",D(".unavailable_date").css("background-color",u))});let t=o.el.querySelectorAll(".fc-daygrid-day-bg")[0];if(t)return m?(t.innerHTML=p,D.each(m,function(a,e){r>=e[0]&&r<=e[1]&&(t.innerHTML=a)})):t.innerHTML=p,o;break}case 1:{v&&D.each(v,function(a,e){e==n.getDay()&&(o.el.children[0].className=o.el.children[0].className+" unavailable_date",D(".unavailable_date").css("background-color",u))});let t=o.el.querySelectorAll(".fc-daygrid-day-bg")[0];if(t)return m?(t.innerHTML=e,D.each(m,function(a,e){r>=e[0]&&r<=e[1]&&(t.innerHTML=a)})):t.innerHTML=e,o;break}case 2:{v&&D.each(v,function(a,e){e==n.getDay()&&(o.el.children[0].className=o.el.children[0].className+" unavailable_date",D(".unavailable_date").css("background-color",u))});let t=o.el.querySelectorAll(".fc-daygrid-day-bg")[0];if(t)return m?(t.innerHTML=i,D.each(m,function(a,e){r>=e[0]&&r<=e[1]&&(t.innerHTML=a)})):t.innerHTML=i,o;break}case 3:{v&&D.each(v,function(a,e){e==n.getDay()&&(o.el.children[0].className=o.el.children[0].className+" unavailable_date",D(".unavailable_date").css("background-color",u))});let t=o.el.querySelectorAll(".fc-daygrid-day-bg")[0];if(t)return m?(t.innerHTML=s,D.each(m,function(a,e){r>=e[0]&&r<=e[1]&&(t.innerHTML=a)})):t.innerHTML=s,o;break}case 4:{v&&D.each(v,function(a,e){e==n.getDay()&&(o.el.children[0].className=o.el.children[0].className+" unavailable_date",D(".unavailable_date").css("background-color",u))});let t=o.el.querySelectorAll(".fc-daygrid-day-bg")[0];if(t)return m?(t.innerHTML=l,D.each(m,function(a,e){r>=e[0]&&r<=e[1]&&(t.innerHTML=a)})):t.innerHTML=l,o;break}case 5:{v&&D.each(v,function(a,e){e==n.getDay()&&(o.el.children[0].className=o.el.children[0].className+" unavailable_date",D(".unavailable_date").css("background-color",u))});let t=o.el.querySelectorAll(".fc-daygrid-day-bg")[0];if(t)return m?(t.innerHTML=c,D.each(m,function(a,e){if(r>=e[0]&&r<=e[1])return t.innerHTML=a,o})):t.innerHTML=c,o;break}case 6:{v&&D.each(v,function(a,e){e==n.getDay()&&(o.el.children[0].className=o.el.children[0].className+" unavailable_date",D(".unavailable_date").css("background-color",u))});let t=o.el.querySelectorAll(".fc-daygrid-day-bg")[0];if(t)return m?(t.innerHTML=d,D.each(m,function(a,e){r>=e[0]&&r<=e[1]&&(t.innerHTML=a)})):t.innerHTML=d,o;break}}}else if("hour"==a){v&&D.each(v,function(a,e){e==n.getDay()&&(o.el.children[0].className=o.el.children[0].className+" unavailable_date",D(".unavailable_date").css("background-color",u))});var _=f[1].ovabrw_price_hour;let t=o.el.querySelectorAll(".fc-daygrid-day-bg")[0];if(t)return m?(t.innerHTML=_,D.each(m,function(a,e){r>=e[0]&&r<=e[1]&&(t.innerHTML=a)})):t.innerHTML=_,o}else if("mixed"==a){e=f[1].ovabrw_daily_monday,i=f[1].ovabrw_daily_tuesday,s=f[1].ovabrw_daily_wednesday,l=f[1].ovabrw_daily_thursday,c=f[1].ovabrw_daily_friday,d=f[1].ovabrw_daily_saturday,p=f[1].ovabrw_daily_sunday;switch(n.getDay()){case 0:{v&&D.each(v,function(a,e){e==n.getDay()&&(o.el.children[0].className=o.el.children[0].className+" unavailable_date",D(".unavailable_date").css("background-color",u))});let t=o.el.querySelectorAll(".fc-daygrid-day-bg")[0];if(t)return m?(t.innerHTML=p,D.each(m,function(a,e){r>=e[0]&&r<=e[1]&&(t.innerHTML=a)})):t.innerHTML=p,o;break}case 1:{v&&D.each(v,function(a,e){e==n.getDay()&&(o.el.children[0].className=o.el.children[0].className+" unavailable_date",D(".unavailable_date").css("background-color",u))});let t=o.el.querySelectorAll(".fc-daygrid-day-bg")[0];if(t)return m?(t.innerHTML=e,D.each(m,function(a,e){r>=e[0]&&r<=e[1]&&(t.innerHTML=a)})):t.innerHTML=e,o;break}case 2:{v&&D.each(v,function(a,e){e==n.getDay()&&(o.el.children[0].className=o.el.children[0].className+" unavailable_date",D(".unavailable_date").css("background-color",u))});let t=o.el.querySelectorAll(".fc-daygrid-day-bg")[0];if(t)return m?(t.innerHTML=i,D.each(m,function(a,e){r>=e[0]&&r<=e[1]&&(t.innerHTML=a)})):t.innerHTML=i,o;break}case 3:{v&&D.each(v,function(a,e){e==n.getDay()&&(o.el.children[0].className=o.el.children[0].className+" unavailable_date",D(".unavailable_date").css("background-color",u))});let t=o.el.querySelectorAll(".fc-daygrid-day-bg")[0];if(t)return m?(t.innerHTML=s,D.each(m,function(a,e){r>=e[0]&&r<=e[1]&&(t.innerHTML=a)})):t.innerHTML=s,o;break}case 4:{v&&D.each(v,function(a,e){e==n.getDay()&&(o.el.children[0].className=o.el.children[0].className+" unavailable_date",D(".unavailable_date").css("background-color",u))});let t=o.el.querySelectorAll(".fc-daygrid-day-bg")[0];if(t)return m?(t.innerHTML=l,D.each(m,function(a,e){r>=e[0]&&r<=e[1]&&(t.innerHTML=a)})):t.innerHTML=l,o;break}case 5:{v&&D.each(v,function(a,e){e==n.getDay()&&(o.el.children[0].className=o.el.children[0].className+" unavailable_date",D(".unavailable_date").css("background-color",u))});let t=o.el.querySelectorAll(".fc-daygrid-day-bg")[0];if(t)return m?(t.innerHTML=c,D.each(m,function(a,e){if(r>=e[0]&&r<=e[1])return t.innerHTML=a,o})):t.innerHTML=c,o;break}case 6:{v&&D.each(v,function(a,e){e==n.getDay()&&(o.el.children[0].className=o.el.children[0].className+" unavailable_date",D(".unavailable_date").css("background-color",u))});let t=o.el.querySelectorAll(".fc-daygrid-day-bg")[0];if(t)return m?(t.innerHTML=d,D.each(m,function(a,e){r>=e[0]&&r<=e[1]&&(t.innerHTML=a)})):t.innerHTML=d,o;break}}}else if("taxi"==a){v&&D.each(v,function(a,e){e==n.getDay()&&(o.el.children[0].className=o.el.children[0].className+" unavailable_date",D(".unavailable_date").css("background-color",u))});_=f[1].ovabrw_price_taxi;let t=o.el.querySelectorAll(".fc-daygrid-day-bg")[0];if(t)return m?(t.innerHTML=_,D.each(m,function(a,e){r>=e[0]&&r<=e[1]&&(t.innerHTML=a)})):t.innerHTML=_,o}}else if("period_time"==(a=h.getAttribute("type_price"))||"transportation"==a)return v&&D.each(v,function(a,e){e==n.getDay()&&(o.el.children[0].className=o.el.children[0].className+" unavailable_date",D(".unavailable_date").css("background-color",u))}),o},dateClick:function(a){var e=h.getAttribute("type_price"),t=new Date(a.date),o=t.getFullYear(),n=(n=t.getMonth()+1)<10?"0"+n:n,r=(r=t.getDate())<10?"0"+r:r,i=new Date,s=new Date(o,n-1,r,24,0),a=o+"-"+n+"-"+r;("hotel"==l||"taxi"==e||D('.rental_item input[name="ovabrw_pickup_date"]').hasClass("no_time_picker")||d.length<1)&&(c=""),v&&D.each(v,function(a,e){if(e==t.getDay())return alert(notifi_disable_day),s=0,!1}),!p.includes(a)&&i<=s&&(i=(i=(i=(i=b).replace("Y",o)).replace("m",n)).replace("d",r),c?D('input[name="ovabrw_pickup_date"]').val(i+" "+c):D('input[name="ovabrw_pickup_date"]').val(i),document.getElementById("booking_form")&&(document.getElementById("booking_form").scrollIntoView({behavior:"smooth"}),D(".startdate_perido_time").each(function(){var a=D(this);a.val()&&T.ova_ajax_load_packages(a)})))}}).render(),_(),D(this).find(".fc-button-group button.fc-button").on("click",function(){_()}))})}D(document).ready(function(){T.init()}),document.addEventListener("DOMContentLoaded",function(){a()}),window.BrwFrontendJS=T,window.BrwCalendar=a}(jQuery);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,